<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>html基础</title>
      <link href="2021/03/26/html%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/26/html%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p> 1、系统结构：</p><ul><li>B/S架构：Browser/Server（浏览器/服务器的交互形式）<ul><li>Browser支持的语言：HTML、CSS、JavaScript</li><li>Server端的语言：C、C++、Java、Python……</li><li>B/S架构的系统有什么优点和缺点：<ul><li>优点：升级方便，只升级服务器端代码即可。维护成本低</li><li>缺点：速度慢、体验不好</li></ul></li></ul></li><li>C/S架构：Client/Server（客户端/服务器端的交互形式）<ul><li>C/S架构的系统有什么优点和缺点：<ul><li>优点：速度快，体验好。（娱乐型的系统多数是C/S架构）</li><li>缺点：升级麻烦，维护成本较高</li></ul></li></ul></li></ul><p>2、什么是HTML？怎么开发HTMl？怎么运行HTML？</p><blockquote><p>HTML:Hyper Text Markup Language(超文本标记语言)</p></blockquote><p>由大量的标签组成，每一个标签都有开始标签和结束标签。</p><p>&lt;标签&gt;</p><p>​    &lt;标签&gt;</p><p>​        &lt;标签 属性名=”属性值” 属性名=“属性值”&gt;</p><p>​    &lt;标签&gt;</p><p>&lt;标签&gt;</p><p>超文本：流媒体、图片、声音、视频……</p><p>HTML开发的时候使用普通的文本编辑器就行，创建的文件扩展名是<code>.html</code>或者<code>.htm</code></p><p>HTML也有专业的开发工具，例如：DreamWeaver、HBuilder……</p><p>直接采用浏览器打开HTMl文件就是运行。</p><p>3、HTML是谁制定的？</p><p>W3C：世界万维网联盟</p><p>W3C制定了HTML的规范，每个浏览器生产厂家都会遵守规范。HTML程序员也会按照这个规范去写代码。</p><p>W3C制定了很多规范：</p><p>​    HTML/XML/http协议/https协议……</p><h1 id="我的第一个HTML"><a href="#我的第一个HTML" class="headerlink" title="我的第一个HTML"></a>我的第一个HTML</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    1、这是HTML的注释</span></span><br><span class="line"><span class="comment">    2、加上以下代码的第一行就表示HTML5语法。去掉就表示HTML4.0</span></span><br><span class="line"><span class="comment">    3、HTML不区分大小写，语法松散不严格。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 头--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 网页标题，显示在网页左上角--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网页的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--网页主体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">网页的主体内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://chenyu521-7g6cys1w453479b5-1257692848.tcloudbaseapp.com/1.html">点击此处预览</a></p><h1 id="HTML的基本标签"><a href="#HTML的基本标签" class="headerlink" title="HTML的基本标签"></a>HTML的基本标签</h1><table><thead><tr><th>标签</th><th>介绍</th></tr></thead><tbody><tr><td><code>&lt;p&gt;</code></td><td>段落标记</td></tr><tr><td><code>&lt;h1&gt;</code></td><td>标题字</td></tr><tr><td><code>&lt;br&gt;</code></td><td>换行标记</td></tr><tr><td><code>&lt;hr&gt;</code></td><td>水平线</td></tr><tr><td><code>&lt;pre&gt;</code></td><td>预留格式</td></tr><tr><td><code>&lt;del&gt;</code></td><td>删除字</td></tr><tr><td><code>&lt;ins&gt;</code></td><td>插入字</td></tr><tr><td><code>&lt;b&gt;</code></td><td>粗体字</td></tr><tr><td><code>&lt;i&gt;</code></td><td>斜体字</td></tr><tr><td><code>&lt;sup&gt;</code></td><td>上标</td></tr><tr><td><code>&lt;sub&gt;</code></td><td>下标</td></tr><tr><td><code>&lt;font&gt;</code></td><td>字体标签</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML的基本标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--段落标记--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一段<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>第二段<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--标题字：是HTML预留的格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--换行标记，&lt;br&gt;是一个独目标记--&gt;</span></span><br><span class="line">        从此处<span class="tag">&lt;<span class="name">br</span>&gt;</span>换行</span><br><span class="line">        <span class="comment">&lt;!--水平线，独目标记--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--color和width都是hr标签的属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--预留格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">            for(int i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">                System.out.println(&quot;i = &quot; + i);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">del</span>&gt;</span>删除字<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入字<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体字<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体字<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--上标--&gt;</span></span><br><span class="line">        10<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--下标--&gt;</span></span><br><span class="line">        10<span class="tag">&lt;<span class="name">sub</span>&gt;</span>m<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--字体标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span>&gt;</span>字体标签<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://chenyu521-7g6cys1w453479b5-1257692848.tcloudbaseapp.com/2.html">点击此处预览</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript笔记</title>
      <link href="2021/03/11/JavaScript%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/11/JavaScript%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章：Html技术、CSS技术、JavaScript技术"><a href="#第一章：Html技术、CSS技术、JavaScript技术" class="headerlink" title="第一章：Html技术、CSS技术、JavaScript技术"></a>第一章：Html技术、CSS技术、JavaScript技术</h1><h2 id="Html技术"><a href="#Html技术" class="headerlink" title="Html技术"></a>Html技术</h2><h3 id="Html简介"><a href="#Html简介" class="headerlink" title="Html简介"></a>Html简介</h3><ul><li><p>它是一门描述网页的语言，HyperText MarkUp Language，超文本标记语言。</p><ul><li>超文本：超出文本的范畴，指的在网页上面可以描述文本、图片、视频等内容</li><li>标记：标签，在标签里面书写内容</li><li>语言：html就是用户和浏览器交互的工具，简单来讲，浏览器会解析html的标记，以特定的效果给展示出来</li></ul></li><li><p>html的主要组成部分：</p><ul><li>文档的声明&lt;!DOCTYPE&gt;：声明了html的类型和版本号</li><li>html的根标记<code>&lt;html&gt;</code> <code>&lt;/html&gt;</code>：标识html的开始和结束</li><li>html的头部标记<code>&lt;head&gt;</code> <code>&lt;/head&gt;</code>：设置页面相关信息</li><li>html的主体标记<code>&lt;body&gt;</code>  <code>&lt;/body&gt;</code>：在页面展示内容</li></ul></li><li><p>html的书写规范：</p><ul><li>html的文件后缀名可以是”<code>.html</code>“或者”<code>.htm</code>“.</li><li>html文件的格式：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">This is my first html page.</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>html文件必须以<code>&lt;html&gt;</code>开始，以<code>&lt;/html&gt;</code>结束</li><li>html语法不区分大小写</li><li>html有结束标记，比如<code>&lt;font&gt;</code>内容<code>&lt;/font&gt;</code>，html的标记如果没有结束标记，自己结束。比如<code>&lt;hr /&gt;</code></li></ul></li><li><p>html作用：它用来编写网页，在网页通过html标记来描述文本、图片、视频等内容</p></li></ul><h3 id="单标记和双标记"><a href="#单标记和双标记" class="headerlink" title="单标记和双标记"></a>单标记和双标记</h3><ul><li>单标记：空标记，就是没有结束标记的称之为单标记。<ul><li>语法：<code>&lt;hr /&gt;</code>   <code>&lt;br /&gt;</code></li></ul></li><li>双标记：体标记，就是这个标记有开始和结束。<ul><li>语法：<code>&lt;font&gt;</code>内容<code>&lt;/font&gt;</code></li></ul></li></ul><h3 id="文本控制和文本样式标记"><a href="#文本控制和文本样式标记" class="headerlink" title="文本控制和文本样式标记"></a>文本控制和文本样式标记</h3><ul><li><p>段落标记<code>&lt;p&gt;</code>   <code>&lt;/p&gt;</code>和换行标记<code>&lt;br /&gt;</code></p><ul><li>段落标记：段落与段落之间会自动换行。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是谁<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我来自哪里<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用html制作网页时可以通过br标记<span class="tag">&lt;<span class="name">br</span> /&gt;</span>实现换行效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>文本样式标记<code>&lt;font&gt;</code>内容<code>&lt;/font&gt;</code></p><ul><li><p>常用的属性：</p><ul><li>face用来描述字体的样式</li><li>size用来描述字体的大小，最大取值为7</li><li>color用来描述字体的颜色，有三种形式表示（英文单词（red）、16进制（#ff0000）、rgb(255,255,0)）</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">我是默认的文本<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span> <span class="attr">size</span>=<span class="string">&quot;7&quot;</span> <span class="attr">color</span>=<span class="string">&quot;green&quot;</span>&gt;</span>我是7号绿色文本，我的字体是微软雅黑<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>其他标记</p><ul><li>标题标记：<code>&lt;h1&gt;</code> <code>&lt;/h1&gt;</code>······<code>&lt;h6&gt;</code> <code>&lt;/h6&gt;</code></li><li>字体样式标记：<code>&lt;b&gt;</code> <code>&lt;/b&gt;</code>；<code>&lt;u&gt;</code> <code>&lt;/u&gt;</code>；<code>&lt;i&gt;</code> <code>&lt;/i&gt;</code></li></ul></li></ul><h3 id="图像标记"><a href="#图像标记" class="headerlink" title="图像标记"></a>图像标记</h3><ul><li><p>作用：在网页上引入图片</p><ul><li><p>语法：<code>&lt;img src=&quot;image url&quot; /&gt;</code></p></li><li><p>常用属性：</p><ul><li>src用来引入图片</li><li>width描述图片的宽度</li><li>height描述图片的边框</li><li>border用来描述图片的边框</li></ul><p>注意：图片的路劲分为绝对路径和相对路径（同级目录，上级目录，下级目录）</p></li><li><p>注释标记：<code>&lt;!--文字内容--&gt;</code>，注释标记的内容不会显示在网页上面</p></li></ul></li></ul><h3 id="表格标记"><a href="#表格标记" class="headerlink" title="表格标记"></a>表格标记</h3><ul><li><p>作用：将数据更加有条理的显示出来，用来规划网页</p></li><li><p>语法：</p><ul><li><p><code>&lt;table&gt;</code></p><p>​    <code>&lt;tr&gt;</code></p><p>​            <code>&lt;td&gt;</code>单元格的内容<code>&lt;/td&gt;</code></p><p>​    <code>&lt;/tr&gt;</code></p><p><code>&lt;/table&gt;</code></p><ul><li>tr：表示行（常用的属性 align 描述表格内的内容显示位置）</li><li>td：表示单元格，合并行：rowspan，合并单元格：colspan</li><li>th：表示单元格，自动居中、加粗。</li></ul></li><li><p>常用的属性</p><ul><li>border：给表格添加边框</li><li>width：描述表格的宽度</li><li>align：描述表格的位置</li><li>cellspacing：描述边框的厚度</li><li>cellpadding：描述文字与边框的距离</li></ul></li><li><p>合并操作：</p><ul><li>要确定表格有多少行和多少列</li><li>要确定合并的是行还是列</li></ul></li></ul></li><li><p>实例</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>80<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>85<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>85<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>80<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>95<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单标记"><a href="#表单标记" class="headerlink" title="表单标记"></a>表单标记</h3><ul><li>简介：把用户输入的数据提交到服务器端，简单来说，表单用来让用户输入数据，表单把数据封装起来，提交到指定的位置</li><li>表单组成：<ul><li>表单控件：用户输入数据，比如说输入用户名，输入密码</li><li>提示信息：告诉用户输入框要输入什么值</li><li>表单域：表示表单的开始和结束，语法<code>&lt;form&gt;</code>提示信息：表单控件<code>&lt;/form&gt;</code></li></ul></li><li>创建表单</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 演示表单控件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>注册新用户<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文本框控件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--密码控件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;psw&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单选框控件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> /&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--复选框控件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>兴趣爱好：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;film&quot;</span> /&gt;</span>看电影</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;code&quot;</span> /&gt;</span>编程</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> /&gt;</span>打游戏</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文件上传控件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>头像：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photo&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--按钮控件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>常用的属性：</p><ul><li>action：表示表单要提交的位置</li><li>method：表单提交的方式，常用的有get提交和post提交，默认提交方式是get</li><li>get提交：数据会显示在浏览器的地址栏，不安全，提交的数据大小有限制</li><li>post提交：数据不会显示在地址栏，是安全的，提交的数据大小没有限制</li></ul></li><li><p>表单控件：<code>&lt;input /&gt;</code></p><ul><li><p>输入框控件的属性type：</p><ul><li>文本框：text</li><li>密码框：password</li><li>单选按钮：radio</li><li>复选按钮：checkout</li><li>上传控件：file</li><li>提交按钮：submit</li><li>重置按钮：reset</li></ul><p>注意：表单想要把数据提交到指定的位置，输入框必须要有name属性。</p></li></ul></li><li><p>文本域标记：<code>&lt;textarea rows=&quot;文本域的行数&quot; cols=&quot;文本域每行输入的字符数&quot;&gt;&lt;/textarea&gt;</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pinglun&quot;</span>&gt;</span>输入评论<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交评论&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用DOS命令</title>
      <link href="2021/03/09/%E5%B8%B8%E7%94%A8DOS%E5%91%BD%E4%BB%A4/"/>
      <url>2021/03/09/%E5%B8%B8%E7%94%A8DOS%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>常用DOS命令</p><ul><li>exit<ul><li>退出当前DOS命令窗口</li></ul></li><li>cls<ul><li>清屏</li></ul></li><li>dir<ul><li>列出当前目录下所有的子文件/子目录</li></ul></li><li>cd<ul><li>切换目录<ul><li>cd .. 回到上级目录</li><li>cd \ 回到根路径</li></ul></li></ul></li><li>mkdir<ul><li>创建文件夹</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Dos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础</title>
      <link href="2021/03/09/linux%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/09/linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux系统简介"><a href="#Linux系统简介" class="headerlink" title="Linux系统简介"></a>Linux系统简介</h1><h2 id="什么是Linux"><a href="#什么是Linux" class="headerlink" title="什么是Linux"></a>什么是Linux</h2><p> Linux 就是一个操作系统，就像你多少已经了解的 Windows（xp，7，8）和 Mac OS 。</p><h2 id="Linux与Windows有什么不同？"><a href="#Linux与Windows有什么不同？" class="headerlink" title="Linux与Windows有什么不同？"></a>Linux与Windows有什么不同？</h2><ul><li>免费与收费</li><li>软件与支持</li><li>安全性</li><li>使用习惯</li><li>可定制性</li></ul><h1 id="基本概念及操作"><a href="#基本概念及操作" class="headerlink" title="基本概念及操作"></a>基本概念及操作</h1><h2 id="什么是终端"><a href="#什么是终端" class="headerlink" title="什么是终端"></a>什么是终端</h2><p> 通常我们在使用 Linux 时，并不是直接与系统打交道，而是通过一个叫做 Shell 的中间程序来完成的，在图形界面下为了实现让我们在一个窗口中完成用户输入和显示输出，Linux 系统还提供了一个叫做终端模拟器的程序（Terminal）。</p><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><blockquote><p>在Linux中，最重要的就是命令，这就包含了两个过程，输入和输出</p><p>输入：输入当然就是打开终端，然后按键盘输入，然后按回车执行</p><p>输出：输出会返回你想要的结果</p></blockquote><h2 id="重要快捷键"><a href="#重要快捷键" class="headerlink" title="重要快捷键"></a>重要快捷键</h2><ul><li><code>Tab</code>：使用Tab键来进行命令补全</li><li><code>Ctrl</code>+<code>C</code>：强行终止当前程序</li><li><code>Ctrl</code>+<code>d</code>：键盘输入结束或退出终端</li><li><code>Ctrl</code>+<code>s</code>：暂停当前程序，暂停后按下任意键恢复运行</li><li><code>Ctrl</code>+<code>z</code>：将当前程序放到后台运行，恢复到前台为命令<code>fg</code></li><li><code>Ctrl</code>+<code>a</code>：将光标移至输入行头，相当于<code>home</code>键</li><li><code>Ctrl</code>+<code>e</code>：将光标移至输入行末，相当于<code>End</code>键</li><li><code>Ctrl</code>+<code>k</code>：删除从光标所在位置到行末</li><li><code>Alt</code>+<code>Backspace</code>：向前删除一个单词</li><li><code>Shift</code>+<code>PgUp</code>：将终端显示向上滚动</li><li><code>Shift</code>+<code>PgDn</code>：将终端显示向下滚动</li></ul><h3 id="学会利用历史输入命令"><a href="#学会利用历史输入命令" class="headerlink" title="学会利用历史输入命令"></a>学会利用历史输入命令</h3><p>很简单，你可以使用键盘上的方向上键<code>↑</code>，恢复你之前输入过的命令，你一试便知。</p><h3 id="学会使用通配符"><a href="#学会使用通配符" class="headerlink" title="学会使用通配符"></a>学会使用通配符</h3><p> 通配符是一种特殊语句，主要有星号（*）和问号（?），用来对字符串进行模糊匹配（比如文件名、参数名）。当查找文件夹时，可以使用它来代替一个或多个真正字符；当不知道真正字符或者懒得输入完整名字时，常常使用通配符代替一个或多个真正字符。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls *.txt</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/document-uid735639labid2timestamp1531471952505.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/document-uid735639labid2timestamp1531471952505.png" alt="1"></a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch love_&#123;1..10&#125;_shiyanlou.txt</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/document-uid735639labid2timestamp1531471982853.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/document-uid735639labid2timestamp1531471982853.png" alt="pic"></a></p><p>Shell常用通配符：</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配 0 或多个字符</td></tr><tr><td><code>?</code></td><td>匹配任意一个字符</td></tr><tr><td><code>[list]</code></td><td>匹配 list 中的任意单一字符</td></tr><tr><td><code>[^list]</code></td><td>匹配 除 list 中的任意单一字符以外的字符</td></tr><tr><td><code>[c1-c2]</code></td><td>匹配 c1-c2 中的任意单一字符 如：[0-9][a-z]</td></tr><tr><td><code>&#123;string1,string2,...&#125;</code></td><td>匹配 string1 或 string2 (或更多)其一字符串</td></tr><tr><td><code>&#123;c1..c2&#125;</code></td><td>匹配 c1-c2 中全部字符 如{1..10}</td></tr></tbody></table><h3 id="学会在命令行中获取帮助"><a href="#学会在命令行中获取帮助" class="headerlink" title="学会在命令行中获取帮助"></a>学会在命令行中获取帮助</h3><p>在 Linux 环境中，如果你遇到困难，可以使用<code>man</code>命令，它是<code>Manual pages</code>的缩写。</p><p>你可以使用如下方式来获得某个命令的说明和使用方式的详细介绍：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man &lt;command_name&gt;</span><br></pre></td></tr></table></figure><p>比如你想查看 man 命令本身的使用方式，你可以输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man man</span><br></pre></td></tr></table></figure><p>通常情况下，man 手册里面的内容都是英文的，这就要求你有一定的英文基础。man 手册的内容很多，涉及了 Linux 使用过程中的方方面面。为了便于查找，man 手册被进行了分册（分区段）处理，在 Research UNIX、BSD、OS X 和 Linux 中，手册通常被分为 8 个区段，安排如下：</p><table><thead><tr><th>区段</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>一般命令</td></tr><tr><td>2</td><td>系统调用</td></tr><tr><td>3</td><td>库函数，涵盖了 C 标准函数库</td></tr><tr><td>4</td><td>特殊文件（通常是/dev 中的设备）和驱动程序</td></tr><tr><td>5</td><td>文件格式和约定</td></tr><tr><td>6</td><td>游戏和屏保</td></tr><tr><td>7</td><td>杂项</td></tr><tr><td>8</td><td>系统管理命令和守护进程</td></tr></tbody></table><p>要查看相应区段的内容，就在 man 后面加上相应区段的数字即可，如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man 1 ls</span><br></pre></td></tr></table></figure><p>会显示第一区段中的<code>ls</code>命令 man 页面。</p><p>所有的手册页遵循一个常见的布局，为了通过简单的 ASCII 文本展示而被优化，而这种情况下可能没有任何形式的高亮或字体控制。一般包括以下部分内容：</p><p><strong>NAME（名称）</strong></p><blockquote><p>该命令或函数的名称，接着是一行简介。</p></blockquote><p><strong>SYNOPSIS（概要）</strong></p><blockquote><p>对于命令，正式的描述它如何运行，以及需要什么样的命令行参数。对于函数，介绍函数所需的参数，以及哪个头文件包含该函数的定义。</p></blockquote><p><strong>DESCRIPTION（说明）</strong></p><blockquote><p>命令或函数功能的文本描述。</p></blockquote><p><strong>EXAMPLES（示例）</strong></p><blockquote><p>常用的一些示例。</p></blockquote><p><strong>SEE ALSO（参见）</strong></p><blockquote><p>相关命令或函数的列表。</p></blockquote><p>也可能存在其它部分内容，但这些部分没有得到跨手册页的标准化。常见的例子包括：OPTIONS（选项），EXIT STATUS（退出状态），ENVIRONMENT（环境），BUGS（程序漏洞），FILES（文件），AUTHOR（作者），REPORTING BUGS（已知漏洞），HISTORY（历史）和 COPYRIGHT（版权）。</p><p>通常 man 手册中的内容很多，你可能不太容易找到你想要的结果，不过幸运的是你可以在 man 中使用搜索<code>/&lt;你要搜索的关键字&gt;</code>，查找完毕后你可以使用<code>n</code>键切换到下一个关键字所在处，<code>shift+n</code>为上一个关键字所在处。使用<code>Space</code>（空格键）翻页，<code>Enter</code>（回车键）向下滚动一行，或者使用<code>k</code>，<code>j</code>（vim 编辑器的移动键）进行向前向后滚动一行。按下<code>h</code>键为显示使用帮助（因为 man 使用 less 作为阅读器，实为<code>less</code>工具的帮助），按下<code>q</code>退出。</p><p>想要获得更详细的帮助，你还可以使用<code>info</code>命令，不过通常使用<code>man</code>就足够了。如果你知道某个命令的作用，只是想快速查看一些它的某个具体参数的作用，那么你可以使用<code>--help</code>参数，大部分命令都会带有这个参数，如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h1 id="用户及文件权限管理"><a href="#用户及文件权限管理" class="headerlink" title="用户及文件权限管理"></a>用户及文件权限管理</h1><h2 id="Linux用户管理"><a href="#Linux用户管理" class="headerlink" title="Linux用户管理"></a>Linux用户管理</h2><p>Linux 是一个可以实现多用户登录的操作系统，比如“李雷”和“韩梅梅”都可以同时登录同一台主机，他们共享一些主机的资源，但他们也分别有自己的用户空间，用于存放各自的文件。但实际上他们的文件都是放在同一个物理磁盘上的甚至同一个逻辑分区或者目录里，但是由于 Linux 的 <strong>用户管理</strong> 和 <strong>权限机制</strong>，不同用户不可以轻易地查看、修改彼此的文件。</p><h3 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">who am i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line">who mom likes</span><br></pre></td></tr></table></figure><p><code>who</code> 命令其它常用参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-a</code></td><td>打印能打印的全部</td></tr><tr><td><code>-d</code></td><td>打印死掉的进程</td></tr><tr><td><code>-m</code></td><td>同<code>am i</code>，<code>mom likes</code></td></tr><tr><td><code>-q</code></td><td>打印当前登录用户数及用户名</td></tr><tr><td><code>-u</code></td><td>打印当前登录用户登录信息</td></tr><tr><td><code>-r</code></td><td>打印运行等级</td></tr></tbody></table><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>在 Linux 系统里， <code>root</code> 账户拥有整个系统至高无上的权限，比如新建和添加用户。</p><blockquote><p>root 权限，系统权限的一种，与 SYSTEM 权限可以理解成一个概念，但高于 Administrator 权限，root 是 Linux 和 UNIX 系统中的超级管理员用户帐户，该帐户拥有整个系统至高无上的权力，所有对象他都可以操作，所以很多黑客在入侵系统的时候，都要把权限提升到 root 权限，这个操作等同于在 Windows 下就是将新建的非法帐户添加到 Administrators 用户组。更比如安卓操作系统中（基于 Linux 内核）获得 root 权限之后就意味着已经获得了手机的最高权限，这时候你可以对手机中的任何文件（包括系统文件）执行所有增、删、改、查的操作。</p></blockquote><p>大部分 Linux 系统在安装时都会建议用户新建一个用户而不是直接使用 root 用户进行登录，当然也有直接使用 root 登录的例如 Kali（基于 Debian 的 Linux 发行版，集成大量工具软件，主要用于数字取证的操作系统）。一般我们登录系统时都是以普通账户的身份登录的，要创建用户需要 root 权限，这里就要用到 <code>sudo</code> 这个命令了。不过使用这个命令有两个大前提，一是你要知道当前登录用户的密码，二是当前用户必须在 <code>sudo</code> 用户组。</p><p>su，su- 与 sudo</p><p><strong>需要注意 Linux 环境下输入密码是不会显示的。</strong></p><p><code>su &lt;user&gt;</code> 可以切换到用户 user，执行时需要输入目标用户的密码，<code>sudo &lt;cmd&gt;</code> 可以以特权级别运行 cmd 命令，需要当前用户属于 sudo 组，且需要输入当前用户的密码。<code>su - &lt;user&gt;</code> 命令也是切换用户，但是同时用户的环境变量和工作目录也会跟着改变成目标用户所对应的。</p><p>现在我们新建一个叫 <code>lilei</code> 的用户：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo adduser lilei</span><br></pre></td></tr></table></figure><p>给lilei用户设置密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd lilei</span><br></pre></td></tr></table></figure><p>现在你已经创建好一个用户，并且你可以使用你创建的用户登录了，使用如下命令切换登录用户：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su -l lilei</span><br></pre></td></tr></table></figure><p>输入刚刚设置的 lilei 的密码，然后输入如下命令并查看输出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">who am i</span><br><span class="line">whoami</span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><p>在 Linux 里面每个用户都有一个归属（用户组），用户组简单地理解就是一组用户的集合，它们共享一些资源和权限，同时拥有私有资源，就跟家的形式差不多，你的兄弟姐妹（不同的用户）属于同一个家（用户组），你们可以共同拥有这个家（共享资源），爸妈对待你们都一样（共享权限），你偶尔写写日记，其他人未经允许不能查看（私有资源和权限）。当然一个用户是可以属于多个用户组的，正如你既属于家庭，又属于学校或公司。</p><h3 id="查看用户组"><a href="#查看用户组" class="headerlink" title="查看用户组"></a>查看用户组</h3><p>在 Linux 里面如何知道自己属于哪些用户组呢？</p><p>方法一：使用 groups 命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groups &lt;username&gt;</span><br></pre></td></tr></table></figure><p>方法二：查看 <code>/etc/group</code> 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/group | sort</span><br></pre></td></tr></table></figure><p>这里 <code>cat</code> 命令用于读取指定文件的内容并打印到终端输出，后面会详细讲它的使用。 <code>| sort</code> 表示将读取的文本进行一个字典排序再输出，然后你将看到如下一堆输出，你可以在最下面看到你想查的用户组信息<br>没找到？没关系，你可以使用 <code>grep</code> 命令过滤掉一些你不想看到的结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/group | grep -E <span class="string">&quot;username&quot;</span></span><br></pre></td></tr></table></figure><p><code>/etc/group</code> 文件格式说明</p><p>/etc/group 的内容包括用户组（Group）、用户组口令、GID（组 ID） 及该用户组所包含的用户（User），每个用户组一条记录。格式如下：</p><blockquote><p>group_name:password:GID:user_list</p></blockquote><p>你看到上面的 password 字段为一个 <code>x</code>，并不是说密码就是它，只是表示密码不可见而已。</p><p>这里需要注意，如果用户的 GID 等于用户组的 GID，那么最后一个字段 <code>user_list</code> 就是空的，这里的 GID 是指用户默认所在组的 GID，可以使用 <code>id</code> 命令查看。</p><h3 id="将其它用户加入-sudo-用户组"><a href="#将其它用户加入-sudo-用户组" class="headerlink" title="将其它用户加入 sudo 用户组"></a>将其它用户加入 sudo 用户组</h3><p>默认情况下新创建的用户是不具有 root 权限的，也不在 sudo 用户组，可以让其加入 sudo 用户组从而获取 root 权限：使用 <code>usermod</code> 命令可以为用户添加用户组，同样使用该命令你必需有 root 权限，你可以直接使用 root 用户为其它用户添加用户组，或者用其它已经在 sudo 用户组的用户使用 sudo 命令获取权限来执行该命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groups lilei</span><br><span class="line">sudo usermod -G sudo lilei</span><br><span class="line">groups lilei</span><br></pre></td></tr></table></figure><p>然后你再切换回 lilei 用户，现在就可以使用 sudo 获取 root 权限了。</p><h3 id="删除用户和用户组"><a href="#删除用户和用户组" class="headerlink" title="删除用户和用户组"></a>删除用户和用户组</h3><p>删除用户是很简单的事：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo deluser lilei --remove-home</span><br></pre></td></tr></table></figure><p>使用 <code>--remove-home</code> 参数在删除用户时候会一并将该用户的工作目录一并删除。如果不使用那么系统会自动在 /home 目录为该用户保留工作目录。</p><p>删除用户组可以使用 <code>groupdel</code> 命令，倘若该群组中仍包括某些用户，则必须先删除这些用户后，才能删除群组。</p><h2 id="Linux文件权限"><a href="#Linux文件权限" class="headerlink" title="Linux文件权限"></a>Linux文件权限</h2><blockquote><p>文件权限就是文件的访问控制权限，即哪些用户和组群可以访问文件以及可以执行什么样的操作。</p><p>Unix/Linux 系统是一个典型的多用户系统，不同的用户处于不同的地位，对文件和目录有不同的访问权限。为了保护系统的安全性，Unix/Linux 系统除了对用户权限作了严格的界定外，还在用户身份认证、访问控制、传输安全、文件读写权限等方面作了周密的控制。</p><p>在 Unix/Linux 中的每一个文件或目录都包含有访问权限，这些访问权限决定了谁能访问和如何访问这些文件和目录。</p></blockquote><p>我们之前已经很多次用到 <code>ls</code> 命令了，如你所见，我们用它来列出并显示当前目录下的文件，当然这是在不带任何参数的情况下，它能做的当然不止这么多，现在我们就要用它来查看文件权限。</p><p>使用较长格式列出文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220140745129.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220140745129.png" alt="image-20210220140745129"></a></p><p>你可能除了知道最后面那一项是文件名之外，其它项就不太清楚了，那么到底是什么意思呢：</p><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/3-10.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/3-10.png" alt="pic"></a></p><ul><li>文件类型</li></ul><p>关于文件类型，这里有一点你必需时刻牢记 <strong>Linux 里面一切皆文件</strong>，正因为这一点才有了设备文件（ <code>/dev</code> 目录下有各种设备文件，大都跟具体的硬件设备相关）这一说。 <code>socket</code>：网络套接字。<code>pipe</code> 管道，这个东西很重要，我们以后将会讨论到，这里你先知道有它的存在即可。<code>软链接文件</code>：链接文件是分为两种的，另一种当然是“硬链接”（硬链接不常用，而软链接等同于 Windows 上的快捷方式，你记住这一点就够了）。</p><ul><li>文件权限</li></ul><p>读权限，表示你可以使用 <code>cat &lt;file name&gt;</code> 之类的命令来读取某个文件的内容；写权限，表示你可以编辑和修改某个文件的内容；</p><p>执行权限，通常指可以运行的二进制程序文件或者脚本文件，如同 Windows 上的 <code>exe</code> 后缀的文件，不过 Linux 上不是通过文件后缀名来区分文件的类型。你需要注意的一点是，<strong>一个目录同时具有读权限和执行权限才可以打开并查看内部文件，而一个目录要有写权限才允许在其中创建其它文件</strong>，这是因为目录文件实际保存着该目录里面的文件的列表等信息。</p><p>所有者权限，这一点相信你应该明白了，至于所属用户组权限，是指你所在的用户组中的所有其它用户对于该文件的权限，比如，你有一个 iPad，那么这个用户组权限就决定了你的兄弟姐妹有没有权限使用它破坏它和占有它。</p><ul><li>链接数</li></ul><blockquote><p>链接到该文件所在的 inode 结点的文件名数目（关于这个概念涉及到 Linux 文件系统的相关概念知识，不在本课程的讨论范围，感兴趣的用户可以查看 <a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/index.html#major2">硬链接和软链接的联系与区别</a>）。</p></blockquote><ul><li>文件大小</li></ul><blockquote><p>以 inode 结点大小为单位来表示的文件大小，你可以给 ls 加上 <code>-lh</code> 参数来更直观的查看文件的大小。</p></blockquote><p>明白了文件权限的一些概念，我们顺带补充一下关于 <code>ls</code> 命令的一些其它常用的用法：</p><ul><li>显示除了 <code>.</code>（当前目录）和 <code>..</code>（上一级目录）之外的所有文件，包括隐藏文件（Linux 下以 <code>.</code> 开头的文件为隐藏文件）。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure><p>当然，你可以同时使用 <code>-a</code> 和 <code>-l</code> 参数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -al</span><br></pre></td></tr></table></figure><p>查看某一个目录的完整属性，而不是显示目录里面的文件属性：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -dl &lt;目录名&gt;</span><br></pre></td></tr></table></figure><ul><li>显示所有文件大小，并以普通人类能看懂的方式呈现：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -asSh</span><br></pre></td></tr></table></figure><p>其中小 s 为显示文件大小，大 S 为按文件大小排序，若需要知道如何按其它方式排序，可以使用 <code>man ls</code> 命令查询。</p><h3 id="变更文件所有者"><a href="#变更文件所有者" class="headerlink" title="变更文件所有者"></a>变更文件所有者</h3><blockquote><p>若前面已经执行删除 lilei 用户的命令，这里重新创建一下。</p></blockquote><p>切换到 lilei 用户，然后在 /home/lilei 目录新建一个文件，命名为 <code>iphone11</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - lilei</span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line">touch iphone11</span><br><span class="line">ls -alh iphone11</span><br></pre></td></tr></table></figure><p>可见文件所有者是 lilei ：</p><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220142508133.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220142508133.png" alt="image-20210220142508133"></a></p><p>现在切换回到 test 用户，使用以下命令变更文件所有者为 test。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要切换到 test 用户执行以下操作</span></span><br><span class="line"><span class="built_in">cd</span> /home/lilei</span><br><span class="line">ls</span><br><span class="line">sudo chown <span class="built_in">test</span> iphone11</span><br></pre></td></tr></table></figure><p>现在查看，发现文件所有者成功修改为 test。</p><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220142709932.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220142709932.png" alt="image-20210220142709932"></a></p><h3 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h3><p>如果你有一个自己的文件不想被其他用户读、写、执行，那么就需要对文件的权限做修改。文件的权限有两种表示方式：</p><ul><li>方式一：二进制数字表示</li></ul><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/3-14.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/3-14.png" alt="pic"></a></p><p>每个文件有三组固定的权限，分别对应拥有者，所属用户组，其他用户，<strong>记住这个顺序是固定的</strong>。文件的读写执行对应字母 <code>rwx</code>，以二进制表示就是 <code>111</code>，用十进制表示就是 <code>7</code>，对进制转换不熟悉的同学可以看看 <a href="https://baike.baidu.com/item/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/3117222">进制转换</a>。例如我们刚刚新建的文件 iphone11 的权限是 <code>rw-rw-rw-</code>，换成对应的十进制表示就是 666，这就表示这个文件的拥有者，所属用户组和其他用户具有读写权限，不具有执行权限。</p><p>如果我要将文件 <code>iphone11</code> 的权限改为只有我自己可以用那么就可以用这个方法更改它的权限。</p><p>为了演示，我先在文件里加点内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;echo \&quot;hello test\&quot;&quot;</span> &gt; iphone11</span><br></pre></td></tr></table></figure><p>然后修改权限：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 600 iphone11</span><br><span class="line">ls -alh iphone11</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220143226694.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220143226694.png" alt="image-20210220143226694"></a></p><p>切换到 lilei 用户，尝试写入和读取操作，可以看到 lilei 用户已经不能读写这个 iphone11 文件了：</p><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220143334585.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220143334585.png" alt="image-20210220143334585"></a></p><h2 id="adduser-和-useradd-的区别是什么"><a href="#adduser-和-useradd-的区别是什么" class="headerlink" title="adduser 和 useradd 的区别是什么"></a>adduser 和 useradd 的区别是什么</h2><p>答：<code>useradd</code> 只创建用户，不会创建用户密码和工作目录，创建完了需要使用 <code>passwd &lt;username&gt;</code> 去设置新用户的密码。<code>adduser</code> 在创建用户的同时，会创建工作目录和密码（提示你设置），做这一系列的操作。其实 <code>useradd</code>、<code>userdel</code> 这类操作更像是一种命令，执行完了就返回。而 <code>adduser</code> 更像是一种程序，需要你输入、确定等一系列操作。</p><h1 id="Linux目录结构及文件基本操作"><a href="#Linux目录结构及文件基本操作" class="headerlink" title="Linux目录结构及文件基本操作"></a>Linux目录结构及文件基本操作</h1><h2 id="目录路径"><a href="#目录路径" class="headerlink" title="目录路径"></a>目录路径</h2><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>有人可能不明白这路径是指什么，有什么用。顾名思义，路径就是你要去哪儿的路线嘛。如果你想进入某个具体的目录或者想获得某个目录的文件（目录本身也是文件）那就得用路径来找到了。</p><p>使用 <code>cd</code> 命令可以切换目录，在 Linux 里面使用 <code>.</code> 表示当前目录，<code>..</code> 表示上一级目录（<strong>注意，以 <code>.</code> 开头的文件都是隐藏文件，所以这两个目录必然也是隐藏的，你可以使用 <code>ls -a</code> 命令查看隐藏文件</strong>），<code>-</code> 表示上一次所在目录，<code>～</code> 通常表示当前用户的 <code>home</code> 目录。使用 <code>pwd</code> 命令可以获取当前所在路径（绝对路径）。</p><p>进入上一级目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><p>进入你的 <code>home</code> 目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="comment"># 或者 cd /home/&lt;你的用户名&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>pwd</code> 获取当前路径：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p>关于绝对路径，简单地说就是以根” / “目录为起点的完整路径，以你所要到的目录为终点，表现形式如： <code>/usr/local/bin</code>，表示根目录下的 <code>usr</code> 目录中的 <code>local</code> 目录中的 <code>bin</code> 目录。</p><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>相对路径，也就是相对于你当前的目录的路径，相对路径是以当前目录 <code>.</code> 为起点，以你所要到的目录为终点，表现形式如： <code>usr/local/bin</code> （这里假设你当前目录为根目录）。你可能注意到，我们表示相对路径实际并没有加上表示当前目录的那个 <code>.</code> ，而是直接以目录名开头，因为这个 <code>usr</code> 目录为 <code>/</code> 目录下的子目录，是可以省略这个 <code>.</code> 的（以后会讲到一个类似不能省略的情况）；如果是当前目录的上一级目录，则需要使用 <code>..</code> ，比如你当前目录为 <code>/home/shiyanlou</code> 目录下，根目录就应该表示为 <code>../../</code> ，表示上一级目录（ <code>home</code> 目录）的上一级目录（ <code>/</code> 目录）。</p><p>下面我们以你的 <code>home</code> 目录为起点，分别以绝对路径和相对路径的方式进入 <code>/usr/local/bin</code> 目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绝对路径</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line"><span class="comment"># 相对路径</span></span><br><span class="line"><span class="built_in">cd</span> ../../usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><h2 id="Linux文件的基本操作"><a href="#Linux文件的基本操作" class="headerlink" title="Linux文件的基本操作"></a>Linux文件的基本操作</h2><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><h4 id="新建空白文件"><a href="#新建空白文件" class="headerlink" title="新建空白文件"></a>新建空白文件</h4><p>使用 <code>touch</code> 命令创建空白文件，关于 <code>touch</code> 命令，其主要作用是来更改已有文件的时间戳的（比如，最近访问时间，最近修改时间），但其在不加任何参数的情况下，只指定一个文件名，则可以创建一个指定文件名的空白文件（不会覆盖已有同名文件），当然你也可以同时指定该文件的时间戳，更多关于 <code>touch</code> 命令的用法，会在文件搜索中涉及。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>新建目录</p><p>使用 <code>mkdir</code>（make directories）命令可以创建一个空目录，也可同时指定创建目录的权限属性。</p><p>创建名为“ test ”的空目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>使用 <code>-p</code> 参数，同时创建父目录（如果不存在该父目录），如下我们同时创建一个多级目录（这在安装软件、配置安装路径时非常有用）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p father/son/grandson</span><br></pre></td></tr></table></figure><p>这里使用的路径是相对路径，代表在当前目录下生成，当然我们直接以绝对路径的方式表示也是可以的。</p><p>还有一点需要注意的是，若当前目录已经创建了一个 test 文件，再使用 <code>mkdir test</code> 新建同名的文件夹，系统会报错文件已存在。这符合 Linux 一切皆文件的理念。</p><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><p>使用 <code>cp</code> 命令（copy）复制一个文件到指定目录。</p><p>将之前创建的 <code>test</code> 文件复制到 <code>/home/shiyanlou/father/son/grandson</code> 目录中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp <span class="built_in">test</span> father/son/grandson</span><br></pre></td></tr></table></figure><p>是不是很方便啊，如果在图形界面则需要先在源目录复制文件，再进到目的目录粘贴文件，而命令行操作步骤就一步到位了嘛。</p><h4 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h4><p>如果直接使用 <code>cp</code> 命令复制一个目录的话，会出现如下错误：</p><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220151423315.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220151423315.png" alt="image-20210220151423315"></a></p><p>要成功复制目录需要加上 <code>-r</code> 或者 <code>-R</code> 参数，表示递归复制，就是说有点“株连九族”的意思：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/<span class="built_in">test</span></span><br><span class="line">mkdir family</span><br><span class="line">cp -r father family</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220151609230.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220151609230.png" alt="image-20210220151609230"></a></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>使用 <code>rm</code>（remove files or directories）命令删除一个文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>有时候你会遇到想要删除一些为只读权限的文件，直接使用 <code>rm</code> 删除会显示一个提示<code>是否删除有写保护的普通空文件&#39;test&#39;?</code></p><p>你如果想忽略这提示，直接删除文件，可以使用 <code>-f</code> 参数强制删除：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -f <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4><p>跟复制目录一样，要删除一个目录，也需要加上 <code>-r</code> 或 <code>-R</code> 参数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -r family</span><br></pre></td></tr></table></figure><p>遇到权限不足删除不了的目录也可以和删除文件一样加上 <code>-f</code> 参数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf family</span><br></pre></td></tr></table></figure><h3 id="移动文件与文件重命名"><a href="#移动文件与文件重命名" class="headerlink" title="移动文件与文件重命名"></a>移动文件与文件重命名</h3><h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><p>使用 <code>mv</code>（move or rename files）命令移动文件（剪切）。命令格式是 <code>mv 源目录文件 目的目录</code>。</p><p>例如将文件“ file1 ”移动到 <code>Documents</code> 目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir Documents</span><br><span class="line">touch file1</span><br><span class="line">mv file1 Documents</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220152800512.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220152800512.png" alt="image-20210220152800512"></a></p><h4 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h4><p><code>mv</code> 命令除了能移动文件外，还能给文件重命名。命令格式为 <code>mv 旧的文件名 新的文件名</code>。</p><p>例如将文件“ file1 ”重命名为“ myfile ”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv file1 myfile</span><br></pre></td></tr></table></figure><h4 id="批量重命名"><a href="#批量重命名" class="headerlink" title="批量重命名"></a>批量重命名</h4><p>要实现批量重命名，<code>mv</code> 命令就有点力不从心了，我们可以使用一个看起来更专业的命令 <code>rename</code> 来实现。不过它要用 perl 正则表达式来作为参数，关于正则表达式我们要在后面才会介绍到，这里只做演示，你只要记得这个 <code>rename</code> 命令可以批量重命名就好了，以后再重新学习也不会有任何问题，毕竟你已经掌握了一个更常用的 <code>mv</code> 命令。</p><p><code>rename</code> 命令并不是内置命令，若提示无该命令可以使用 <code>sudo apt-get install rename</code> 命令自行安装。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/<span class="built_in">test</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用通配符批量创建 5 个文件:</span></span><br><span class="line">touch file&#123;1..5&#125;.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量将这 5 个后缀为 .txt 的文本文件重命名为以 .c 为后缀的文件:</span></span><br><span class="line">rename <span class="string">&#x27;s/\.txt/\.c/&#x27;</span> *.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量将这 5 个文件，文件名和后缀改为大写:</span></span><br><span class="line">rename <span class="string">&#x27;y/a-z/A-Z/&#x27;</span> *.c</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220153732699.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220153732699.png" alt="image-20210220153732699"></a></p><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><ul><li>使用cat, tac和nl命令查看文件</li></ul><p>前两个命令都是用来打印文件内容到标准输出（终端），其中 <code>cat</code> 为正序显示，<code>tac</code> 为倒序显示。</p><blockquote><p>标准输入输出：当我们执行一个 shell 命令行时通常会自动打开三个标准文件，即标准输入文件（stdin），默认对应终端的键盘、标准输出文件（stdout）和标准错误输出文件（stderr），后两个文件都对应被重定向到终端的屏幕，以便我们能直接看到输出内容。进程将从标准输入文件中得到输入数据，将正常输出数据输出到标准输出文件，而将错误信息送到标准错误文件中。</p></blockquote><p>比如我们要查看之前从 <code>/etc</code> 目录下拷贝来的 <code>passwd</code> 文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/shiyanlou</span><br><span class="line">cp /etc/passwd passwd</span><br><span class="line">cat passwd</span><br></pre></td></tr></table></figure><p>可以加上 <code>-n</code> 参数显示行号：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat -n passwd</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220154053263.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220154053263.png" alt="image-20210220154053263"></a></p><p><code>nl</code> 命令，添加行号并打印，这是个比 <code>cat -n</code> 更专业的行号打印命令。</p><p>这里简单列举它的常用的几个参数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-b : 指定添加行号的方式，主要有两种：</span><br><span class="line">    -b a:表示无论是否为空行，同样列出行号(<span class="string">&quot;cat -n&quot;</span>就是这种方式)</span><br><span class="line">    -b t:只列出非空行的编号并列出（默认为这种方式）</span><br><span class="line">-n : 设置行号的样式，主要有三种：</span><br><span class="line">    -n ln:在行号字段最左端显示</span><br><span class="line">    -n rn:在行号字段最右边显示，且不加 0</span><br><span class="line">    -n rz:在行号字段最右边显示，且加 0</span><br><span class="line">-w : 行号字段占用的位数(默认为 6 位)</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220154159835.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220154159835.png" alt="image-20210220154159835"></a></p><p>你会发现使用这几个命令，默认的终端窗口大小，一屏显示不完文本的内容，得用鼠标拖动滚动条或者滑动滚轮才能继续往下翻页，要是可以直接使用键盘操作翻页就好了，那么你就可以使用下面要介绍的命令。</p><ul><li>使用more和less命令分页查看文件</li></ul><p>如果说上面的 <code>cat</code> 是用来快速查看一个文件的内容的，那么这个 <code>more</code> 和 <code>less</code> 就是天生用来”阅读”一个文件的内容的，比如说 man 手册内部就是使用的 <code>less</code> 来显示内容。其中 <code>more</code> 命令比较简单，只能向一个方向滚动，而 <code>less</code> 为基于 <code>more</code> 和 <code>vi</code> （一个强大的编辑器）开发，功能更强大。<code>less</code> 的使用基本和 <code>more</code> 一致，具体使用请查看 man 手册，这里只介绍 <code>more</code> 命令的使用。</p><p>使用 <code>more</code> 命令打开 <code>passwd</code> 文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">more passwd</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220154329854.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220154329854.png" alt="image-20210220154329854"></a></p><p>打开后默认只显示一屏内容，终端底部显示当前阅读的进度。可以使用 <code>Enter</code> 键向下滚动一行，使用 <code>Space</code> 键向下滚动一屏，按下 <code>h</code> 显示帮助，<code>q</code> 退出。</p><ul><li>使用head和tail命令查看文件</li></ul><p>这两个命令，那些性子比较急的人应该会喜欢，因为它们一个是只查看文件的头几行（默认为 10 行，不足 10 行则显示全部）和尾几行。还是拿 passwd 文件举例，比如当我们想要查看最近新增加的用户，那么我们可以查看这个 <code>/etc/passwd</code> 文件，不过我们前面也看到了，这个文件里面一大堆乱糟糟的东西，看起来实在费神啊。因为系统新增加一个用户，会将用户的信息添加到 passwd 文件的最后，那么这时候我们就可以使用 <code>tail</code> 命令了：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail /etc/passwd</span><br></pre></td></tr></table></figure><p>甚至更直接的只看一行， 加上 <code>-n</code> 参数，后面紧跟行数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -n 1 /etc/passwd</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220154513965.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220154513965.png" alt="image-20210220154513965"></a></p><p>关于 <code>tail</code> 命令，不得不提的还有它一个很牛的参数 <code>-f</code>，这个参数可以实现不停地读取某个文件的内容并显示。这可以让我们动态查看日志，达到实时监视的目的。</p><h3 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h3><p>我们可以使用 <code>file</code> 命令查看文件的类型：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file /bin/ls</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220155045432.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220155045432.png" alt="image-20210220155045432"></a></p><p>说明这是一个可执行文件，运行在 64 位平台，并使用了动态链接文件（共享库）。</p><p>与 Windows 不同的是，如果你新建了一个 shiyanlou.txt 文件，Windows 会自动把它识别为文本文件，而 <code>file</code> 命令会识别为一个空文件。这个前面我提到过，在 Linux 中文件的类型不是根据文件后缀来判断的。当你在文件里输入内容后才会显示文件类型。</p><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220162449416.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220162449416.png" alt="image-20210220162449416"></a></p><h3 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h3><p>在 Linux 下面编辑文件通常我们会直接使用专门的命令行编辑器比如（emacs，vim，nano），由于涉及 Linux 上的编辑器的内容比较多，且非常重要，故我们有一门单独的基础课专门介绍这中一个编辑器 vim 。</p><blockquote><p>强烈建议正在学习这门 Linux 基础课的你先在这里暂停一下，去学习 <a href="https://www.lanqiao.cn/courses/2">vim 编辑器</a>的使用（至少掌握基本的操作），然后再继续本课程后面的内容，因为后面的内容会假设你已经学会了 vim 编辑器的使用。</p></blockquote><p>如果你想更加快速地入门，可以直接使用 Linux 内部的 vim 学习教程，输入如下命令即可开始：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vimtutor</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220162626963.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220162626963.png" alt="image-20210220162626963"></a></p><h1 id="环境变量与文件查找"><a href="#环境变量与文件查找" class="headerlink" title="环境变量与文件查找"></a>环境变量与文件查找</h1><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>要解释环境变量，得先明白变量是什么，准确的说应该是 Shell 变量，所谓变量就是计算机中用于记录一个值（不一定是数值，也可以是字符或字符串）的符号，而这些符号将用于不同的运算处理中。通常变量与值是一对一的关系，可以通过表达式读取它的值并赋值给其它变量，也可以直接指定数值赋值给任意变量。为了便于运算和处理，大部分的编程语言会区分变量的类型，用于分别记录数值、字符或者字符串等等数据类型。Shell 中的变量也基本如此，有不同类型（但不用专门指定类型名），可以参与运算，有作用域限定。</p><blockquote><p>变量的作用域即变量的有效范围（比如一个函数中、一个源文件中或者全局范围），在该范围内只能有一个同名变量。一旦离开则该变量无效，如同不存在这个变量一般。</p></blockquote><p>在 Shell 中如何创建一个变量，如何给变量赋值和如何读取变量的值呢？这部分内容会在 <a href="https://www.lanqiao.cn/courses/944">高级 bash 脚本编程指南</a> 这门课中详细介绍，这里我简单举例说明一下：</p><p>使用 <code>declare</code> 命令创建一个变量名为 tmp 的变量：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">declare</span> tmp</span><br></pre></td></tr></table></figure><blockquote><p>其实也可以不用 declare 预声明一个变量，直接即用即创建，这里只是告诉你 declare 的作用，这在创建其它指定类型的变量（如数组）时会用到。</p></blockquote><p>使用 <code>=</code> 号赋值运算符，将变量 tmp 赋值为 shiyanlou。注意，与其他语言不同的是， Shell 中的赋值操作，<code>=</code> 两边不可以输入空格，否则会报错。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正确的赋值</span></span><br><span class="line">tmp=<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误的赋值</span></span><br><span class="line">tmp = <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>读取变量的值，使用 <code>echo</code> 命令和 <code>$</code> 符号（**$ 符号用于表示引用一个变量的值，初学者经常忘记输入**）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$tmp</span></span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220163933546.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220163933546.png" alt="image-20210220163933546"></a></p><p><strong>注意：并不是任何形式的变量名都是可用的，变量名只能是英文字母、数字或者下划线，且不能以数字作为开头。</strong></p><h3 id="环境变量-1"><a href="#环境变量-1" class="headerlink" title="环境变量"></a>环境变量</h3><p>简单理解了变量的概念，就很容易理解环境变量了。环境变量的作用域比自定义变量的要大，如 Shell 的环境变量作用于自身和它的子进程。在所有的 UNIX 和类 UNIX 系统中，每个进程都有其各自的环境变量设置，且默认情况下，当一个进程被创建时，除了创建过程中明确指定的话，它将继承其父进程的绝大部分环境设置。Shell 程序也作为一个进程运行在操作系统之上，而我们在 Shell 中运行的大部分命令都将以 Shell 的子进程的方式运行。</p><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/5-3.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/5-3.png" alt="1"></a></p><p>通常我们会涉及到的变量类型有三种：</p><ul><li>当前 Shell 进程私有用户自定义变量，如上面我们创建的 tmp 变量，只在当前 Shell 中有效。</li><li>Shell 本身内建的变量。</li><li>从自定义变量导出的环境变量。</li></ul><p>也有三个与上述三种环境变量相关的命令：<code>set</code>，<code>env</code>，<code>export</code>。这三个命令很相似，都是用于打印环境变量信息，区别在于涉及的变量范围不同。详见下表：</p><table><thead><tr><th>命 令</th><th>说 明</th></tr></thead><tbody><tr><td><code>set</code></td><td>显示当前 Shell 所有变量，包括其内建环境变量（与 Shell 外观等相关），用户自定义变量及导出的环境变量。</td></tr><tr><td><code>env</code></td><td>显示与当前用户相关的环境变量，还可以让命令在指定环境中运行。</td></tr><tr><td><code>export</code></td><td>显示从 Shell 中导出成环境变量的变量，也能通过它将自定义变量导出为环境变量。</td></tr></tbody></table><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/5-3.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/5-3.png" alt="1"></a></p><p>你可以更直观的使用 <code>vimdiff</code> 工具比较一下它们之间的差别：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">temp=<span class="built_in">test</span></span><br><span class="line"><span class="built_in">export</span> temp_env=<span class="built_in">test</span></span><br><span class="line">env|sort&gt;env.txt</span><br><span class="line"><span class="built_in">export</span>|sort&gt;export.txt</span><br><span class="line"><span class="built_in">set</span>|sort&gt;set.txt</span><br></pre></td></tr></table></figure><p>上述操作将命令输出通过管道 <code>|</code> 使用 <code>sort</code> 命令排序，再重定向到对象文本文件中。管道的概念后面我们会学到，现在你知道这是什么意思就行了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vimdiff env.txt export.txt set.txt</span><br></pre></td></tr></table></figure><p>使用 <code>vimdiff</code> 工具比较导出的几个文件的内容，退出 <code>vimdiff</code> 需要按下 Esc 后输入 <code>:q</code> 即可退出。</p><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220173803346.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220173803346.png" alt="image-20210220173803346"></a></p><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220173827239.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220173827239.png" alt="image-20210220173827239"></a></p><p>关于哪些变量是环境变量，可以简单地理解成在当前进程的子进程有效则为环境变量，否则不是（有些人也将所有变量统称为环境变量，只是以全局环境变量和局部环境变量进行区分，我们只要理解它们的实质区别即可）。我们这里用 <code>export</code> 命令来体会一下，先在 Shell 中设置一个变量 <code>temp=test</code>，然后再新创建一个子 Shell 查看 <code>temp</code> 变量的值</p><p><strong>注意：为了与普通变量区分，通常我们习惯将环境变量名设为大写。</strong></p><p><strong>永久生效</strong></p><p>但是问题来了，当你关机后，或者关闭当前的 shell 之后，环境变量就没了啊。怎么才能让环境变量永久生效呢？</p><p>按变量的生存周期来划分，Linux 变量可分为两类：</p><ol><li>永久的：需要修改配置文件，变量永久生效；</li><li>临时的：使用 export 命令行声明即可，变量在关闭 shell 时失效。</li></ol><p>这里介绍两个重要文件 <code>/etc/bashrc</code>（有的 Linux 没有这个文件） 和 <code>/etc/profile</code> ，它们分别存放的是 shell 变量和环境变量。还有要注意区别的是每个用户目录下的一个隐藏文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .profile 可以用 ls -a 查看</span></span><br><span class="line"><span class="built_in">cd</span> /home/shiyanlou</span><br><span class="line">ls -a</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220174301273.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220174301273.png" alt="image-20210220174301273"></a></p><p>这个 .profile 只对当前用户永久生效。因为它保存在当前用户的 Home 目录下，当切换用户时，工作目录可能一并被切换到对应的目录中，这个文件就无法生效。而写在 <code>/etc/profile</code> 里面的是对所有用户永久生效，所以如果想要添加一个永久生效的环境变量，只需要打开 <code>/etc/profile</code>，在最后加上你想添加的环境变量就好啦。</p><h3 id="命令的查找路径与顺序"><a href="#命令的查找路径与顺序" class="headerlink" title="命令的查找路径与顺序"></a>命令的查找路径与顺序</h3><p>查看 <code>PATH</code> 环境变量的内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>默认情况下你会看到如下输出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/<span class="built_in">local</span>/games</span><br></pre></td></tr></table></figure><p>创建一个 Shell 脚本文件，你可以使用 gedit，vim，sublime 等工具编辑。如果你是直接复制的话，建议使用 gedit 或者 sublime，否则可能导致代码缩进混乱。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/shiyanlou</span><br><span class="line">touch hello_shell.sh</span><br><span class="line">gedit hello_shell.sh</span><br></pre></td></tr></table></figure><p>在脚本中添加如下内容，保存并退出。</p><p><strong>注意不要省掉第一行，这不是注释，有用户反映有语法错误，就是因为没有了第一行。</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((i=0; i&lt;10; i++));<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;hello shell&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>为文件添加可执行权限，否则执行会报错没有权限：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 755 hello_shell.sh</span><br></pre></td></tr></table></figure><p>执行脚本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/shiyanlou</span><br><span class="line">./hello_shell.sh</span><br></pre></td></tr></table></figure><p>创建一个 C 语言 <code>hello world</code> 程序：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/shiyanlou</span><br><span class="line">gedit hello_world.c</span><br></pre></td></tr></table></figure><p>输入如下内容，同样不能省略第一行。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存后使用 gcc 生成可执行文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -o hello_world hello_world.c</span><br></pre></td></tr></table></figure><p><strong>gcc 生成二进制文件默认具有可执行权限，不需要修改。</strong></p><p>在 <code>/home/test</code> 家目录创建一个 <code>mybin</code> 目录，并将上述 <code>hello_shell.sh</code> 和 <code>hello_world</code> 文件移动到其中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/shiyanlou</span><br><span class="line">mkdir mybin</span><br><span class="line">mv hello_shell.sh hello_world mybin/</span><br></pre></td></tr></table></figure><p>现在你可以在 <code>mybin</code> 目录中分别运行你刚刚创建的两个程序：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> mybin</span><br><span class="line">./hello_shell.sh</span><br><span class="line">./hello_world</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220175339796.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220175339796.png" alt="image-20210220175339796"></a></p><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220175434996.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220175434996.png" alt="image-20210220175434996"></a></p><p>回到上一级目录，也就是 <code>test</code> 家目录，当再想运行那两个程序时，会发现提示命令找不到，除非加上命令的完整路径，但那样很不方便，如何做到像使用系统命令一样执行自己创建的脚本文件或者程序呢？那就要将命令所在路径添加到 <code>PATH</code> 环境变量了。</p><h3 id="添加自定义路径到“PATH”环境变量"><a href="#添加自定义路径到“PATH”环境变量" class="headerlink" title="添加自定义路径到“PATH”环境变量"></a>添加自定义路径到“PATH”环境变量</h3><p>在前面我们应该注意到 <code>PATH</code> 里面的路径是以 <code>:</code> 作为分割符的，所以我们可以这样添加自定义路径：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:/home/<span class="built_in">test</span>/mybin</span><br></pre></td></tr></table></figure><p><strong>注意这里一定要使用绝对路径。</strong></p><p>现在你就可以在任意目录执行那两个命令了（注意需要去掉前面的 <code>./</code>）。你可能会意识到这样还并没有很好的解决问题，因为我给 PATH 环境变量追加了一个路径，它也只是在当前 Shell 有效，我一旦退出终端，再打开就会发现又失效了。有没有方法让添加的环境变量全局有效？或者每次启动 Shell 时自动执行上面添加自定义路径到 PATH 的命令？下面我们就来说说后一种方式——让它自动执行。</p><p>在每个用户的 home 目录中有一个 Shell 每次启动时会默认执行一个配置脚本，以初始化环境，包括添加一些用户自定义环境变量等等。实验楼的环境使用的 Shell 是 zsh，它的配置文件是 <code>.zshrc</code>，相应的如果使用的 Shell 是 Bash，则配置文件为 <code>.bashrc</code>。它们在 <code>etc</code> 下还都有一个或多个全局的配置文件，不过我们一般只修改用户目录下的配置文件。Shell 的种类有很多，可以使用 <code>cat /etc/shells</code> 命令查看当前系统已安装的 Shell。</p><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220190454237.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220190454237.png" alt="image-20210220190454237"></a></p><h3 id="修改和删除已有变量"><a href="#修改和删除已有变量" class="headerlink" title="修改和删除已有变量"></a>修改和删除已有变量</h3><h4 id="变量修改"><a href="#变量修改" class="headerlink" title="变量修改"></a>变量修改</h4><p>变量的修改有以下几种方式：</p><table><thead><tr><th>变量设置方式</th><th>说明</th></tr></thead><tbody><tr><td><code>$&#123;变量名#匹配字串&#125;</code></td><td>从头向后开始匹配，删除符合匹配字串的最短数据</td></tr><tr><td><code>$&#123;变量名##匹配字串&#125;</code></td><td>从头向后开始匹配，删除符合匹配字串的最长数据</td></tr><tr><td><code>$&#123;变量名%匹配字串&#125;</code></td><td>从尾向前开始匹配，删除符合匹配字串的最短数据</td></tr><tr><td><code>$&#123;变量名%%匹配字串&#125;</code></td><td>从尾向前开始匹配，删除符合匹配字串的最长数据</td></tr><tr><td><code>$&#123;变量名/旧的字串/新的字串&#125;</code></td><td>将符合旧字串的第一个字串替换为新的字串</td></tr><tr><td><code>$&#123;变量名//旧的字串/新的字串&#125;</code></td><td>将符合旧字串的全部字串替换为新的字串</td></tr></tbody></table><p>比如我们可以修改前面添加到 PATH 的环境变量，将添加的 mybin 目录从环境变量里删除。为了避免操作失误导致命令找不到，我们先将 PATH 赋值给一个新的自定义变量 mypath：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mypath=<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$mypath</span></span><br><span class="line">mypath=<span class="variable">$&#123;mypath%/home/shiyanlou/mybin&#125;</span></span><br><span class="line"><span class="comment"># 或使用通配符 * 表示任意多个任意字符</span></span><br><span class="line">mypath=<span class="variable">$&#123;mypath%*/mybin&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到路径已经不存在了。</p><h4 id="变量删除"><a href="#变量删除" class="headerlink" title="变量删除"></a>变量删除</h4><p>可以使用 <code>unset</code> 命令删除一个环境变量：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> mypath</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220191131912.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220191131912.png" alt="image-20210220191131912"></a></p><h3 id="让环境变量立即生效"><a href="#让环境变量立即生效" class="headerlink" title="让环境变量立即生效"></a>让环境变量立即生效</h3><p>前面我们在 Shell 中修改了一个配置脚本文件之后（比如 zsh 的配置文件 home 目录下的 <code>.zshrc</code>），每次都要退出终端重新打开甚至重启主机之后其才能生效，很是麻烦，我们可以使用 <code>source</code> 命令来让其立即生效，如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/shiyanlou</span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure><p><code>source</code> 命令还有一个别名就是 <code>.</code>，上面的命令如果替换成 <code>.</code> 的方式就该是：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. ./.zshrc</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220191409381.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220191409381.png" alt="image-20210220191409381"></a></p><h2 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h2><blockquote><p>与搜索相关的命令常用的有 <code>whereis</code>，<code>which</code>，<code>find</code> 和 <code>locate</code>。</p></blockquote><ul><li><code>whereis</code> 简单快速</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whereis who</span><br><span class="line">whereis find</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220191514096.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220191514096.png" alt="image-20210220191514096"></a></p><p>你会看到 <code>whereis find</code> 找到了三个路径，两个可执行文件路径和一个 man 在线帮助文件所在路径，这个搜索很快，因为它并没有从硬盘中依次查找，而是直接从数据库中查询。</p><p><code>whereis</code> 只能搜索二进制文件（<code>-b</code>），man 帮助文件（<code>-m</code>）和源代码文件（<code>-s</code>）。如果想要获得更全面的搜索结果可以使用 <code>locate</code> 命令。</p><ul><li><code>locate</code> 快而全</li></ul><p>使用 <code>locate</code> 命令查找文件也不会遍历硬盘，它通过查询 <code>/var/lib/mlocate/mlocate.db</code> 数据库来检索信息。不过这个数据库也不是实时更新的，系统会使用定时任务每天自动执行 <code>updatedb</code> 命令来更新数据库。所以有时候你刚添加的文件，它可能会找不到，需要手动执行一次 <code>updatedb</code> 命令（在我们的环境中必须先执行一次该命令）。注意这个命令也不是内置的命令，在部分环境中需要手动安装，然后执行更新。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install locate</span><br><span class="line">sudo updatedb</span><br></pre></td></tr></table></figure><p>它可以用来查找指定目录下的不同文件类型，如查找 <code>/etc</code> 下所有以 sh 开头的文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locate /etc/sh</span><br></pre></td></tr></table></figure><blockquote><p>注意，它不只是在/etc目录下查找，还会自动递归子目录进行查找</p></blockquote><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220191813718.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220191813718.png" alt="image-20210220191813718"></a></p><p>查找 <code>/usr/share/</code> 下所有 jpg 文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locate /usr/share/*.jpg</span><br></pre></td></tr></table></figure><blockquote><p>环境里使用 zsh，在 <code>~/.zshrc</code> 文件里添加了 <code>setopt nonomatch</code> 配置，这样就不会&gt;自动处理和修复命令，因此可以不使用 <code>\</code> 转义。如果其他环境中执行该命令提示 <code>zsh: no matches found: /usr/share/*.jpg</code>，则可以在 <code>.zshrc</code> 中添加上述配置，或者使用 <code>\</code> 转义。</p></blockquote><p>如果想只统计数目可以加上 <code>-c</code> 参数，<code>-i</code> 参数可以忽略大小写进行查找，<code>whereis</code> 的 <code>-b</code>、<code>-m</code>、<code>-s</code> 同样可以使用。</p><ul><li><code>which</code> 小而精</li></ul><p><code>which</code> 本身是 Shell 内建的一个命令，我们通常使用 <code>which</code> 来确定是否安装了某个指定的程序，因为它只从 <code>PATH</code> 环境变量指定的路径中去搜索命令并且返回第一个搜索到的结果。也就是说，我们可以看到某个系统命令是否存在以及执行的到底是哪一个地方的命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> man</span><br><span class="line"><span class="built_in">which</span> nginx</span><br><span class="line"><span class="built_in">which</span> ping</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220192254586.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220192254586.png" alt="image-20210220192254586"></a></p><ul><li><code>find</code> 精而细</li></ul><p><code>find</code> 应该是这几个命令中最强大的了，它不但可以通过文件类型、文件名进行查找而且可以根据文件的属性（如文件的时间戳，文件的权限等）进行搜索。</p><p>这条命令表示去 <code>/etc/</code> 目录下面 ，搜索名字叫做 interfaces 的文件或者目录。这是 <code>find</code> 命令最常见的格式，千万记住 <code>find</code> 的第一个参数是要搜索的地方。命令前面加上 <code>sudo</code> 是因为 test 只是普通用户，对 <code>/etc</code> 目录下的很多文件都没有访问的权限，如果是 root 用户则不用使用。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo find /etc/ -name interfaces</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220192411566.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220192411566.png" alt="image-20210220192411566"></a></p><blockquote><p><strong>注意 find 命令的路径是作为第一个参数的， 基本命令格式为 find [path][option] [action] 。</strong></p></blockquote><p>与时间相关的命令参数：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-atime</code></td><td>最后访问时间</td></tr><tr><td><code>-ctime</code></td><td>最后修改文件内容的时间</td></tr><tr><td><code>-mtime</code></td><td>最后修改文件属性的时间</td></tr></tbody></table><p>下面以 <code>-mtime</code> 参数举例：</p><ul><li><code>-mtime n</code>：n 为数字，表示为在 n 天之前的“一天之内”修改过的文件</li><li><code>-mtime +n</code>：列出在 n 天之前（不包含 n 天本身）被修改过的文件</li><li><code>-mtime -n</code>：列出在 n 天之内（包含 n 天本身）被修改过的文件</li><li><code>-newer file</code>：file 为一个已存在的文件，列出比 file 还要新的文件名</li></ul><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/5-8.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/5-8.png" alt="1"></a></p><p>列出 home 目录中，当天（24 小时之内）有改动的文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find ~ -mtime 0</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220192533815.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220192533815.png" alt="image-20210220192533815"></a></p><p>列出用户家目录下比 /etc 目录新的文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find ~ -newer /etc</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220192603025.png"><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210220192603025.png" alt="image-20210220192603025"></a></p><h2 id="玩个好玩的"><a href="#玩个好玩的" class="headerlink" title="玩个好玩的"></a>玩个好玩的</h2><blockquote><p>模仿黑客帝国代码雨效果</p><p>sudo apt-get install cmatrix</p><p>修改字体为黑底绿字</p><p>执行cmatrix</p><p>还可以改变代码的颜色：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmatrix -C red</span><br></pre></td></tr></table></figure></blockquote><h1 id="文件打包与解压缩"><a href="#文件打包与解压缩" class="headerlink" title="文件打包与解压缩"></a>文件打包与解压缩</h1><p>​        在 Windows 上最常见的不外乎这两种 <code>*.zip</code>，<code>*.7z</code> 后缀的压缩文件。而在 Linux 上面常见的格式除了以上两种外，还有 <code>.rar</code>，<code>*.gz</code>，<code>*.xz</code>，<code>*.bz2</code>，<code>*.tar</code>，<code>*.tar.gz</code>，<code>*.tar.xz</code>，<code>*.tar.bz2</code>，简单介绍如下：</p><table><thead><tr><th>文件后缀名</th><th>说明</th></tr></thead><tbody><tr><td><code>*.zip</code></td><td>zip 程序打包压缩的文件</td></tr><tr><td><code>*.rar</code></td><td>rar 程序压缩的文件</td></tr><tr><td><code>*.7z</code></td><td>7zip 程序压缩的文件</td></tr><tr><td><code>*.tar</code></td><td>tar 程序打包，未压缩的文件</td></tr><tr><td><code>*.gz</code></td><td>gzip 程序（GNU zip）压缩的文件</td></tr><tr><td><code>*.xz</code></td><td>xz 程序压缩的文件</td></tr><tr><td><code>*.bz2</code></td><td>bzip2 程序压缩的文件</td></tr><tr><td><code>*.tar.gz</code></td><td>tar 打包，gzip 程序压缩的文件</td></tr><tr><td><code>*.tar.xz</code></td><td>tar 打包，xz 程序压缩的文件</td></tr><tr><td><code>*tar.bz2</code></td><td>tar 打包，bzip2 程序压缩的文件</td></tr><tr><td><code>*.tar.7z</code></td><td>tar 打包，7z 程序压缩的文件</td></tr></tbody></table><h2 id="zip压缩打包程序"><a href="#zip压缩打包程序" class="headerlink" title="zip压缩打包程序"></a>zip压缩打包程序</h2><ul><li>使用zip打包文件夹，注意输入完整的参数和路径：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/<span class="built_in">test</span></span><br><span class="line">zip -r -q -o test.zip</span><br><span class="line">/home/<span class="built_in">test</span>/Desktop</span><br><span class="line">du -h test.zip</span><br><span class="line">file test.zip</span><br></pre></td></tr></table></figure><p>上面命令将目录 <code>/home/test/Desktop</code> 打包成一个文件，并查看了打包后文件的大小和类型。第一行命令中，<code>-r</code> 参数表示递归打包包含子目录的全部内容，<code>-q</code> 参数表示为安静模式，即不向屏幕输出信息，<code>-o</code>，表示输出文件，需在其后紧跟打包输出文件名。后面使用 <code>du</code> 命令查看打包后文件的大小（后面会具体说明该命令）。</p><ul><li>设置压缩级别为 9 和 1（9 最大，1 最小），重新打包：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip -r -9 -q -o test_9.zip /home/<span class="built_in">test</span>/Desktop -x ~/*.zip</span><br><span class="line">zip -r -1 -q -o test_1.zip /home/<span class="built_in">test</span>/Desktop -x ~/*.zip</span><br></pre></td></tr></table></figure><p>这里添加了一个参数用于设置压缩级别 <code>-[1-9]</code>，1 表示最快压缩但体积大，9 表示体积最小但耗时最久。最后那个 <code>-x</code> 是为了排除我们上一次创建的 zip 文件，否则又会被打包进这一次的压缩文件中，<strong>注意：这里只能使用绝对路径，否则不起作用</strong>。</p><p>我们再用 <code>du</code> 命令分别查看默认压缩级别、最低、最高压缩级别及未压缩的文件的大小：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du -h -d 0 *.zip ~ | sort</span><br></pre></td></tr></table></figure><p>通过 man 手册可知：</p><ul><li><code>-h</code>， –human-readable（顾名思义，你可以试试不加的情况）</li><li><code>-d</code>， –max-depth（所查看文件的深度）</li></ul><h2 id="使用unzip命令解压缩zip文件"><a href="#使用unzip命令解压缩zip文件" class="headerlink" title="使用unzip命令解压缩zip文件"></a>使用unzip命令解压缩zip文件</h2><p>将 test.zip` 解压到当前目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip test.zip</span><br></pre></td></tr></table></figure><p>使用安静模式，将文件解压到指定目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip -q test.zip -d ziptest</span><br></pre></td></tr></table></figure><p>上述指定目录不存在，将会自动创建。如果你不想解压只想查看压缩包的内容你可以使用 <code>-l</code> 参数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip -l test.zip</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 使用 unzip 解压文件时我们同样应该注意兼容问题，不过这里我们关心的不再是上面的问题，而是中文编码的问题，通常 Windows 系统上面创建的压缩文件，如果有有包含中文的文档或以中文作为文件名的文件时默认会采用 GBK 或其它编码，而 Linux 上面默认使用的是 UTF-8 编码，如果不加任何处理，直接解压的话可能会出现中文乱码的问题（有时候它会自动帮你处理），为了解决这个问题，我们可以在解压时指定编码类型。</p><p>使用 <code>-O</code>（英文字母，大写 o）参数指定编码类型：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip -O GBK 中文压缩文件.zip</span><br></pre></td></tr></table></figure><h2 id="tar打包工具"><a href="#tar打包工具" class="headerlink" title="tar打包工具"></a>tar打包工具</h2><p>在 Linux 上面更常用的是 <code>tar</code> 工具，tar 原本只是一个打包工具，只是同时还是实现了对 7z、gzip、xz、bzip2 等工具的支持，这些压缩工具本身只能实现对文件或目录（单独压缩目录中的文件）的压缩，没有实现对文件的打包压缩，所以我们也无需再单独去学习其他几个工具，tar 的解压和压缩都是同一个命令，只需参数不同，使用比较方便。</p><p>下面先掌握 <code>tar</code> 命令一些基本的使用方式，即不进行压缩只是进行打包（创建归档文件）和解包的操作。</p><ul><li>创建一个 tar 包：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/<span class="built_in">test</span></span><br><span class="line">tar -P -cf test.tar /home/<span class="built_in">test</span>/Desktop</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-P</code> 保留绝对路径符，<code>-c</code> 表示创建一个 tar 包文件，<code>-f</code> 用于指定创建的文件名，注意文件名必须紧跟在 <code>-f</code> 参数之后，比如不能写成 <code>tar -fc test.tar</code>，可以写成 <code>tar -f test.tar -c ~</code>。你还可以加上 <code>-v</code> 参数以可视的的方式输出打包的文件。</p><ul><li>解包一个文件（<code>-x</code> 参数）到指定路径的<strong>已存在</strong>目录（<code>-C</code> 参数）：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir tardir</span><br><span class="line">tar -xf test.tar -C tardir</span><br></pre></td></tr></table></figure><ul><li>只查看不解包文件 <code>-t</code> 参数：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -tf shiyanlou.tar</span><br></pre></td></tr></table></figure><ul><li>保留文件属性和跟随链接（符号链接或软链接），有时候我们使用 tar 备份文件当你在其他主机还原时希望保留文件的属性（<code>-p</code> 参数）和备份链接指向的源文件而不是链接本身（<code>-h</code> 参数）：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -cphf etc.tar /etc</span><br></pre></td></tr></table></figure><p>对于创建不同的压缩格式的文件，对于 tar 来说是相当简单的，需要的只是换一个参数，这里我们就以使用 <code>gzip</code> 工具创建 <code>*.tar.gz</code> 文件为例来说明。</p><ul><li>我们只需要在创建 tar 文件的基础上添加 <code>-z</code> 参数，使用 <code>gzip</code> 来压缩文件：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -czf test.tar.gz /home/<span class="built_in">test</span>/Desktop</span><br></pre></td></tr></table></figure><ul><li>解压 <code>*.tar.gz</code> 文件：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xzf test.tar.gz</span><br></pre></td></tr></table></figure><p><img src="https://doc.shiyanlou.com/document-uid735639labid61timestamp1532339561961.png" alt="此处输入图片的描述"></p><p>现在我们要使用其它的压缩工具创建或解压相应文件只需要更改一个参数即可：</p><table><thead><tr><th>压缩文件格式</th><th>参数</th></tr></thead><tbody><tr><td><code>*.tar.gz</code></td><td><code>-z</code></td></tr><tr><td><code>*.tar.xz</code></td><td><code>-J</code></td></tr><tr><td><code>*tar.bz2</code></td><td><code>-j</code></td></tr></tbody></table><blockquote><p>tar 命令的参数很多，不过常用的就是上述这些，需要了解更多你可以查看 man 手册获取帮助。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>说了这么多，其实平常使用的参数并没有那么复杂，只需要记住常用的组合就可以了。 常用命令：</p><ul><li>zip：</li><li>打包 ：zip something.zip something （目录请加 -r 参数）</li><li>解包：unzip something.zip</li><li>指定路径：-d 参数</li><li>tar：</li><li>打包：tar -cf something.tar something</li><li>解包：tar -xf something.tar</li><li>指定路径：-C 参数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/08/hello-world/"/>
      <url>2021/03/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git教程</title>
      <link href="2021/02/04/Git%E6%95%99%E7%A8%8B/"/>
      <url>2021/02/04/Git%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>可以直接从Git官网<a href="https://git-scm.com/downloads">下载</a> 安装程序，然后按默认选项安装即可。</p><p>安装完成后，在开始菜单里找到Git-Git Bash，出现一个类似于命令行窗口一样的东西，说明Git安装成功。</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210204181019540.png" alt="image-20210204181019540"></p><p>安装完成后，进行设置，在命令行输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>注意：git config命令的–global参数使用之后表示这台机器上所有的Git仓库都会使用这个配置。</p><h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><ul><li><p>版本库介绍</p><p>版本库又名仓库，英文名repository，简单理解就是一个目录，这个目录里所有文件都可以被Git管理起来，每个文件的修改、删除，Git都可以跟踪，方便在任何时候都可以追踪历史，或者在将来某个时刻可以“还原”。</p></li><li><p>创建版本库</p><ul><li>第一，先选择一个合适的地方，创建一个空目录</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir test</span><br><span class="line">$ cd test</span><br><span class="line">$ pwd</span><br><span class="line">&#x2F;f&#x2F;test</span><br></pre></td></tr></table></figure><p>pwd命令用于显示当前目录</p><ul><li>第二，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in </span><br><span class="line">&#x2F;f&#x2F;test</span><br></pre></td></tr></table></figure><p>这个时候Git就已经把仓库建好了，并且告诉你这是一个空仓库(empty Git repository)，然后当前目录下多了一个<code>.git</code>的文件夹，这个文件夹是Git用来跟踪管理版本库的，注意：里面内容请勿修改。</p></li><li><p>将文件添加到版本库</p><ul><li>我们先在目录下编写一个<code>readme.txt</code>文件，内容随意</li><li>使用命令<code>git add</code>告诉Git，把文件添加到仓库：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><ul><li>使用命令<code>git commit</code>告诉Git，把文件提交到仓库：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br></pre></td></tr></table></figure><p>简单理解一下此命令，-m后面输入的是本次提交的说明</p><p>其实也可以<code>add</code>多个文件，然后一次<code>commit</code>，比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m &quot;add 3 files.&quot;</span><br></pre></td></tr></table></figure><ul><li>可能出现的问题及原因：<ul><li>输入<code>git add readme.txt</code>，得到错误：<code>fatal:not a git repository(or any of the parent directories)</code>。</li><li>Git命令必须在Git仓库目录内执行(<code>git init</code>除外)，在仓库目录外执行没有意义。</li><li>输入<code>git add readme.txt</code>，得到错误<code>fatal:pathspec &#39;readme.txt&#39; did not match any files</code>。</li><li>添加某个文件时，该文件必须在当前目录下存在，用<code>ls</code>或者<code>dir</code>命令查看当前目录的文件，查看文件是否存在，或者是否写错了文件名</li></ul></li></ul></li></ul><h1 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h1><ul><li>修改readme.txt文件，然后执行<code>git status</code>命令查看结果</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，<code>readme.txt</code>被修改过了，但还没有准备提交。</p><p>虽然Git告诉我们文件被修改了，但是如果一段时间过后，已经记不清是怎么修改的，这个时候就需要<code>git diff</code>这个命令查看：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff readme.txt </span><br><span class="line">diff --git a&#x2F;readme.txt b&#x2F;readme.txt</span><br><span class="line">index 46d49bf..9247db6 100644</span><br><span class="line">--- a&#x2F;readme.txt</span><br><span class="line">+++ b&#x2F;readme.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-Git is a version control system.</span><br><span class="line">+Git is a distributed version control system.</span><br><span class="line"> Git is free software.</span><br></pre></td></tr></table></figure><p><code>git diff</code>顾名思义就是查看difference，通过上面的命令就可以看到，我们在第一行添加了一个单词distributed。</p><p>知道对readme.txt作了什么修改后，再提交就放心多了，提交修改和提交新文件的方法一样，第一步是<code>git add</code>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><p>同样没有任何输出，在执行第二步<code>git commit</code>之前，再运行<code>git status</code>看看当前仓库的状态</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">modified: readme.txt</span><br></pre></td></tr></table></figure><p><code>git status</code>告诉我们，将要被提交的修改包括<code>readme.txt</code>，下一步，放心的提交了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$git commit -m &quot;add distributed&quot;</span><br><span class="line">[master e475afc] add distributed</span><br><span class="line"> 1 file changed,1 insertion(+),1 deletion(-)</span><br></pre></td></tr></table></figure><p>提交后，我们再用<code>git status</code>命令看看仓库的当前状态：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit,working tree clean</span><br></pre></td></tr></table></figure><p>Git告诉我们当前没有需要提交的修改，而且，工作目录是干净的</p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>​        Git会对每次的提交进行“保存”，这个保存在Git中被称为<code>commit</code>，一旦文件改乱了，或者误删了文件，还可以从最近的一个<code>commit</code>恢复，然后继续工作，而不是以前的文件全部丢失。</p><p>​        我们想想我们的<code>readme.txt</code>有几个版本，当然了，时间过去越久，你可能越来越不记得，此时，你需要<code>git log</code>命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)</span><br><span class="line">Author: chenyu521 &lt;longtao071666@outlook.com&gt;</span><br><span class="line">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366</span><br><span class="line">Author: chenyu521 &lt;longtao071666@outlook.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: chenyu521 &lt;longtao071666@outlook.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><p><code>git log</code>显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是<code>append GPL</code>，上一次是<code>add distributed</code>，最早的一次的<code>wrote a readme file</code></p><p>好了，现在我们准备版本回退</p><p>​        首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，上一个版本即使<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code> ？，这样肯定不好，所以写成<code>HEAD~100</code>。</p><p>​        现在，我们要把当前版本<code>append GPL</code>回退到上一个版本<code>add distributed</code>，就可以使用<code>git reset</code>命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at e475afc add distributed</span><br></pre></td></tr></table></figure><p>现在我们查看一下<code>readme.txt</code>内容，看看是不是版本<code>add distributed</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>果然我们回来了，此时我们查看<code>git log</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -&gt; master)</span><br><span class="line">Author: chenyu521 &lt;longtao071666@outlook.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: chenyu521 &lt;longtao071666@outlook.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><p>最新的哪个版本<code>append GPL</code>已经看不到了，想回去，怎么办？</p><p>只要窗口没有关掉，找到那个<code>append GPL</code>的<code>commit id</code>是<code>1094adb...</code>，于是我们可以指定回到此版本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard 1094a</span><br><span class="line">HEAD is now at 83b0afe append GPL</span><br></pre></td></tr></table></figure><p>版本号写前几位就行</p><p>如果你窗口关掉了，找不到<code>commit id</code>，那可以使用<code>git reflog</code>，这个Git提供的命令用来记录你的每一次命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e475afc HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class="line">e475afc HEAD@&#123;3&#125;: commit: add distributed</span><br><span class="line">eaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure><p>从输出可以知道，<code>append GPL</code>的<code>commit id</code>是<code>1094adb</code>，我们就又可以回去了</p><h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p><code>git add</code>再<code>git commit</code>，也可以别着急提交第一次修改，先<code>git add</code>第二次修改，再<code>git commit</code>，就相当于把两次修改合并后一块提交了：</p><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt; <code>git commit</code></p><p>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><p><code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到<code>git checkout</code>命令。</p><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;你的用户名&#x2F;你的仓库名</span><br></pre></td></tr></table></figure><p>下一步推送本地库内容到远程库：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push --set-upstream origin master</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>上面两条都可以</p><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>使用命令<code>git clone</code>克隆</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;你的用户名&#x2F;你的仓库名</span><br></pre></td></tr></table></figure><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建和合并分支"><a href="#创建和合并分支" class="headerlink" title="创建和合并分支"></a>创建和合并分支</h2><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch &#39;dev&#39;</span><br></pre></td></tr></table></figure><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch &#39;dev&#39;</span><br></pre></td></tr></table></figure><p>然后，用<code>git branch</code>命令查看当前分支：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p><p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p><h2 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h2><p>开发一个新feature，最好新建一个分支；</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li></ul><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><ul><li>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li><li>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</li><li>命令<code>git tag</code>可以查看所有标签。</li></ul><h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><ul><li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 的下载及安装</title>
      <link href="2021/02/03/Windows10/"/>
      <url>2021/02/03/Windows10/</url>
      
        <content type="html"><![CDATA[<p>1.首先百度搜索windows10 site: www .microsoft .com , 搜索出来点击我下图的</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200229353.png" alt="image-20210203200229353"></p><p>2.点击下方Download tool now（中文页面显示的是立即下载工具），然后点击保存</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200246929.png" alt="image-20210203200246929"></p><p>3.插上U盘，对U盘进行格式化操作</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200256992.png" alt="image-20210203200256992"></p><p>4.打开刚刚下载的软件（软件长的就是下图那样）</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200315677.png" alt="image-20210203200315677"></p><p>出现此页面后点击接受</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200329479.png" alt="image-20210203200329479"></p><p>5.点击为另一台电脑创建安装介质，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200341494.png" alt="image-20210203200341494"></p><p>6.软件会自动匹配适合你电脑的windows10版本，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200351065.png" alt="image-20210203200351065"></p><p>7.选择U盘，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200359990.png" alt="image-20210203200359990"></p><p>8.选择你的U盘，点击下一步</p><p>9.然后就进入了windows10下载页面</p><p>10.等待下载以及刻录完成，出现如下界面，点击完成，让软件自动清理</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200444993.png" alt="image-20210203200444993"></p><p>10.拔掉U盘，关闭电脑，开机时按特定的键进入开机启动项选择（惠普按F8，联想按F12，华硕按esc，选择U盘启动）</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200454223.png" alt="image-20210203200454223"></p><p>11.选择usb启动后进入windows安装页面</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200510520.png" alt="image-20210203200510520"></p><p>12.勾选我接受许可条款，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200519850.png" alt="image-20210203200519850"></p><p>13.选择我没有产品密钥</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200536055.png" alt="image-20210203200536055"></p><p>14.选择要安装的windows版本，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200553425.png" alt="image-20210203200553425"></p><p>15.点击自定义：仅安装windows</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200603592.png" alt="image-20210203200603592"></p><p>16.格式化所有磁盘，然后删除，不能格式化的，直接删除</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200613222.png" alt="image-20210203200613222"></p><p>17.点击新建，输入大小（按照MB计算的，这里新建的是C盘大小）</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200623124.png" alt="image-20210203200623124"></p><p>18.点击应用</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200633795.png" alt="image-20210203200633795"></p><p>19.然后选择那个你建的盘，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200641654.png" alt="image-20210203200641654"></p><p>20.随后便进入到了，安装页面，安装过程请耐心等待</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200650106.png" alt="image-20210203200650106"></p><p>21.等待结束后便进入了这个页面</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200659008.png" alt="image-20210203200659008"></p><p>22.根据提示进行配置，配置完成后进入windows界面</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200708290.png" alt="image-20210203200708290"></p><p>23.开机后啥都不操作，等，半小时左右吧，反正睡一觉就好了<br>然后右键个性化，主页，更新和安全，检查更新，安装过程提示重启请勿重启，等待windows全部更新完成再重启</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200717806.png" alt="image-20210203200717806"></p><p>24.然后右键点击个性化，点击主题，点击桌面图标设置</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200729340.png" alt="image-20210203200729340"></p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200818160.png" alt="image-20210203200818160"></p><p>25.设置完成后右键点击计算机，点击管理，点击磁盘管理</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200831848.png" alt="image-20210203200831848"></p><p>26.右键点击未分配，选择新建简单卷</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200844786.png" alt="image-20210203200844786"></p><p>27.选择盘符，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200852552.png" alt="image-20210203200852552"></p><p>28，点击下一步创建完成，然后每个盘符都这样创建</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200900794.png" alt="image-20210203200900794"></p><p>29.磁盘配置完成后，桌面右键点击显示设置</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200908610.png" alt="image-20210203200908610"></p><p>30.点击高级缩放设置</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200916561.png" alt="image-20210203200916561"></p><p>31.设置125然后点击应用，然后点击立即注销，重新登陆一下<br>至此windows安装结束</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Windows10的下载及安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语言基础</title>
      <link href="2021/01/31/Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
      <url>2021/01/31/Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章：Java语言基础"><a href="#第二章：Java语言基础" class="headerlink" title="第二章：Java语言基础"></a>第二章：Java语言基础</h1><h2 id="关于JAVA语言当中的标识符"><a href="#关于JAVA语言当中的标识符" class="headerlink" title="关于JAVA语言当中的标识符"></a>关于JAVA语言当中的标识符</h2><ul><li>什么是标识符？<ul><li>在Java源程序中凡是程序员有权利自己命令的单词都是标识符</li><li>标识符可以标识什么元素？<ul><li>类名</li><li>方法名</li><li>变量名</li><li>接口名</li><li>常量名</li></ul></li></ul></li><li>标识符的命名规则<ul><li>一个合法的标识符只能由==数字、字母、下划线、美元符号==组成，不能含有其它符号</li><li>不能以数字开头</li><li>严格区分大小写</li><li>关键字不能做标识符</li></ul></li><li>标识符的命名规范<ul><li>最好见名知意（username,password）</li><li>遵守驼峰命名规则（SystemService,UserSerivce）</li><li>类名、接口名：首字母大写，后面每个单词首字母大写</li><li>变量名、方法名：首字母小写，后面每个单词首字母大写</li><li>常量名：全部大写</li></ul></li></ul><h2 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h2><ul><li><p>关于字面值</p><ul><li>-10、100</li><li>-“abc”</li><li>-‘a’</li><li>-true、false</li><li>-3.14</li></ul></li><li><p>字面值就是数据</p></li><li><p>字面值是java源程序的组成部分之一，包括标识符和关键字它们都是Java源程序的组成部分</p></li><li><p>数据在现实世界当中是分门别类的，所以数据在计算机编程语言中也是有类型的：【数据类型】</p><ul><li>-10、100属于整数型字面值</li><li>-3.14属于浮点型字面值</li><li>-true、false属于布尔型字面值</li><li>-“abc”、”中国人”属于字符串型字面值</li><li>-‘A’、’人’属于字符型字面值</li></ul></li><li><p>注意：</p><ul><li>Java语言当中所有的字符串型字面值必须使用双引号括起来</li><li>Java语言当中所有的字符型字面值必须使用单引号括起来</li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>什么是变量？<ul><li>变量本质上来说是内存中的一块空间，这块空间==有数据类型、有名字、有字面值==</li><li>变量包含三部分：==数据类型、名称、字面值【数据】==</li><li>变量是内存中存储数据的最基本的单元</li></ul></li><li>数据类型的作用？<ul><li>不同的数据有不同的类型，不同的数据类型底层会分配不同大小的空间</li><li>数据类型是指导程序在运行阶段应该分配多大的内存空间</li></ul></li><li>变量要求：变量中存储的具体的==数据==必须和变量的==数据类型==一致，当不一致时编译报错。</li><li>声明变量的语法格式：<ul><li>数据类型 变量名;<ul><li>变量名只要是合法的标识符就行。规范：首字母小写，后面每个单词首字母大写。</li></ul></li></ul></li><li>变量声明之后怎么赋值？<ul><li>语法格式： 变量名=字面值;</li><li>要求：字面值的数据类型必须和变量的数据类型一致</li><li>等号是一个运算符，叫做赋值运算符，赋值运算符先运算等号右边的表达式，表达式执行结束之后的结果赋值给左边的变量。</li></ul></li><li>声明和赋值可以放到一起完成</li><li>变量赋值之后，可以重新赋值。变量的值可变化</li><li>有了变量的概念之后，内存空间得到了重复的使用。</li><li>通常访问一个变量包括两种访问形式<ul><li>第一种：读取变量中保存的具体数据</li><li>第二种：修改变量中保存的具体数据</li></ul></li><li>变量在一行上可以声明多个</li><li>java中的变量必须先声明，再赋值，才能访问</li><li>在方法体中的java代码，是遵守自上而下的顺序依次执行的，逐行执行。</li><li>再同一个==作用域==当中，变量名不能重名，但是变量可以重新赋值</li><li>变量的作用域<ul><li>什么是作用域？<ul><li>变量的作用域，其实描述的是变量的有效范围，在什么范围之内是可以被访问的，只要出了这个范围该变量就无法访问了。</li></ul></li></ul></li><li>关于变量的分类<ul><li>根据变量声明的位置来分类：<ul><li>局部变量<ul><li>在方法体中声明的变量叫做局部变量</li></ul></li><li>成员变量<ul><li>在方法体外【类体之内】声明的变量叫做成员变量</li></ul></li></ul></li></ul></li><li>在不同的作用域中，变量名是可以相同的</li><li>java遵循==就近原则==</li><li>类体中不能直接编写java语句【除声明变量之外】</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p>数据类型的作用是什么？</p><ul><li>程序当中有很多数据，每一个数据都是有相关类型的，不同数据类型的数据占用空间大小不同，数据类型的作用是指导JVM在运行程序的时候给该数据分配多大的内存空间</li></ul></li><li><p>数据类型的分类</p><ul><li>基本数据类型</li><li>引用数据类型（类、接口、数组······）</li></ul></li><li><p>关于基本数据类型</p><ul><li>第一类：整数型<ul><li>byte，short，int，long</li></ul></li><li>第二类：浮点型<ul><li>float，double</li></ul></li><li>第三类：布尔型<ul><li>Boolean</li></ul></li><li>第四类：字符型<ul><li>char</li></ul></li></ul></li><li><p>字符串不属于基本数据类型，属于==引用数据类型==，字符属于基本数据类型</p><ul><li>字符串使用双引号””</li><li>字符使用单引号’’</li></ul></li><li><p>八种基本数据类型各自占用空间大小是多少</p><ul><li><table><thead><tr><th>基本数据类型</th><th>占用空间大小</th></tr></thead><tbody><tr><td>byte</td><td>1</td></tr><tr><td>short</td><td>2</td></tr><tr><td>int</td><td>4</td></tr><tr><td>long</td><td>8</td></tr><tr><td>float</td><td>4</td></tr><tr><td>double</td><td>8</td></tr><tr><td>boolean</td><td>1</td></tr><tr><td>char</td><td>2</td></tr></tbody></table></li></ul></li><li><p>计算机在任何情况下都只能识别二进制。例如：只认识101010101010101010101【现代的计算机底层采用交流电的方式，接通和断开就两种状态，计算机只识别1/0，其他不认识】</p></li><li><p>什么是二进制？</p><ul><li>数据的一种表示形式。十进制表示满十进一原则。二进制表示满二进一原则</li></ul></li><li><p>字节（byte）：</p><ul><li>1byte=8bit【1个字节=8个比特位】1个比特位表示一个二进制位：1/0</li></ul></li><li><p>整数型当中的byte类型，占用</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/08/hello-world/"/>
      <url>2021/03/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git教程</title>
      <link href="2021/02/04/Git%E6%95%99%E7%A8%8B/"/>
      <url>2021/02/04/Git%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>可以直接从Git官网<a href="https://git-scm.com/downloads">下载</a> 安装程序，然后按默认选项安装即可。</p><p>安装完成后，在开始菜单里找到Git-Git Bash，出现一个类似于命令行窗口一样的东西，说明Git安装成功。</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210204181019540.png" alt="image-20210204181019540"></p><p>安装完成后，进行设置，在命令行输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>注意：git config命令的–global参数使用之后表示这台机器上所有的Git仓库都会使用这个配置。</p><h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><ul><li><p>版本库介绍</p><p>版本库又名仓库，英文名repository，简单理解就是一个目录，这个目录里所有文件都可以被Git管理起来，每个文件的修改、删除，Git都可以跟踪，方便在任何时候都可以追踪历史，或者在将来某个时刻可以“还原”。</p></li><li><p>创建版本库</p><ul><li>第一，先选择一个合适的地方，创建一个空目录</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir test</span><br><span class="line">$ cd test</span><br><span class="line">$ pwd</span><br><span class="line">&#x2F;f&#x2F;test</span><br></pre></td></tr></table></figure><p>pwd命令用于显示当前目录</p><ul><li>第二，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in </span><br><span class="line">&#x2F;f&#x2F;test</span><br></pre></td></tr></table></figure><p>这个时候Git就已经把仓库建好了，并且告诉你这是一个空仓库(empty Git repository)，然后当前目录下多了一个<code>.git</code>的文件夹，这个文件夹是Git用来跟踪管理版本库的，注意：里面内容请勿修改。</p></li><li><p>将文件添加到版本库</p><ul><li>我们先在目录下编写一个<code>readme.txt</code>文件，内容随意</li><li>使用命令<code>git add</code>告诉Git，把文件添加到仓库：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><ul><li>使用命令<code>git commit</code>告诉Git，把文件提交到仓库：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br></pre></td></tr></table></figure><p>简单理解一下此命令，-m后面输入的是本次提交的说明</p><p>其实也可以<code>add</code>多个文件，然后一次<code>commit</code>，比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m &quot;add 3 files.&quot;</span><br></pre></td></tr></table></figure><ul><li>可能出现的问题及原因：<ul><li>输入<code>git add readme.txt</code>，得到错误：<code>fatal:not a git repository(or any of the parent directories)</code>。</li><li>Git命令必须在Git仓库目录内执行(<code>git init</code>除外)，在仓库目录外执行没有意义。</li><li>输入<code>git add readme.txt</code>，得到错误<code>fatal:pathspec &#39;readme.txt&#39; did not match any files</code>。</li><li>添加某个文件时，该文件必须在当前目录下存在，用<code>ls</code>或者<code>dir</code>命令查看当前目录的文件，查看文件是否存在，或者是否写错了文件名</li></ul></li></ul></li></ul><h1 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h1><ul><li>修改readme.txt文件，然后执行<code>git status</code>命令查看结果</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，<code>readme.txt</code>被修改过了，但还没有准备提交。</p><p>虽然Git告诉我们文件被修改了，但是如果一段时间过后，已经记不清是怎么修改的，这个时候就需要<code>git diff</code>这个命令查看：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff readme.txt </span><br><span class="line">diff --git a&#x2F;readme.txt b&#x2F;readme.txt</span><br><span class="line">index 46d49bf..9247db6 100644</span><br><span class="line">--- a&#x2F;readme.txt</span><br><span class="line">+++ b&#x2F;readme.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-Git is a version control system.</span><br><span class="line">+Git is a distributed version control system.</span><br><span class="line"> Git is free software.</span><br></pre></td></tr></table></figure><p><code>git diff</code>顾名思义就是查看difference，通过上面的命令就可以看到，我们在第一行添加了一个单词distributed。</p><p>知道对readme.txt作了什么修改后，再提交就放心多了，提交修改和提交新文件的方法一样，第一步是<code>git add</code>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><p>同样没有任何输出，在执行第二步<code>git commit</code>之前，再运行<code>git status</code>看看当前仓库的状态</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">modified: readme.txt</span><br></pre></td></tr></table></figure><p><code>git status</code>告诉我们，将要被提交的修改包括<code>readme.txt</code>，下一步，放心的提交了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$git commit -m &quot;add distributed&quot;</span><br><span class="line">[master e475afc] add distributed</span><br><span class="line"> 1 file changed,1 insertion(+),1 deletion(-)</span><br></pre></td></tr></table></figure><p>提交后，我们再用<code>git status</code>命令看看仓库的当前状态：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit,working tree clean</span><br></pre></td></tr></table></figure><p>Git告诉我们当前没有需要提交的修改，而且，工作目录是干净的</p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>​        Git会对每次的提交进行“保存”，这个保存在Git中被称为<code>commit</code>，一旦文件改乱了，或者误删了文件，还可以从最近的一个<code>commit</code>恢复，然后继续工作，而不是以前的文件全部丢失。</p><p>​        我们想想我们的<code>readme.txt</code>有几个版本，当然了，时间过去越久，你可能越来越不记得，此时，你需要<code>git log</code>命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)</span><br><span class="line">Author: chenyu521 &lt;longtao071666@outlook.com&gt;</span><br><span class="line">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366</span><br><span class="line">Author: chenyu521 &lt;longtao071666@outlook.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: chenyu521 &lt;longtao071666@outlook.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><p><code>git log</code>显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是<code>append GPL</code>，上一次是<code>add distributed</code>，最早的一次的<code>wrote a readme file</code></p><p>好了，现在我们准备版本回退</p><p>​        首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，上一个版本即使<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code> ？，这样肯定不好，所以写成<code>HEAD~100</code>。</p><p>​        现在，我们要把当前版本<code>append GPL</code>回退到上一个版本<code>add distributed</code>，就可以使用<code>git reset</code>命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at e475afc add distributed</span><br></pre></td></tr></table></figure><p>现在我们查看一下<code>readme.txt</code>内容，看看是不是版本<code>add distributed</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>果然我们回来了，此时我们查看<code>git log</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -&gt; master)</span><br><span class="line">Author: chenyu521 &lt;longtao071666@outlook.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: chenyu521 &lt;longtao071666@outlook.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><p>最新的哪个版本<code>append GPL</code>已经看不到了，想回去，怎么办？</p><p>只要窗口没有关掉，找到那个<code>append GPL</code>的<code>commit id</code>是<code>1094adb...</code>，于是我们可以指定回到此版本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard 1094a</span><br><span class="line">HEAD is now at 83b0afe append GPL</span><br></pre></td></tr></table></figure><p>版本号写前几位就行</p><p>如果你窗口关掉了，找不到<code>commit id</code>，那可以使用<code>git reflog</code>，这个Git提供的命令用来记录你的每一次命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e475afc HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class="line">e475afc HEAD@&#123;3&#125;: commit: add distributed</span><br><span class="line">eaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure><p>从输出可以知道，<code>append GPL</code>的<code>commit id</code>是<code>1094adb</code>，我们就又可以回去了</p><h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p><code>git add</code>再<code>git commit</code>，也可以别着急提交第一次修改，先<code>git add</code>第二次修改，再<code>git commit</code>，就相当于把两次修改合并后一块提交了：</p><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt; <code>git commit</code></p><p>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><p><code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到<code>git checkout</code>命令。</p><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;你的用户名&#x2F;你的仓库名</span><br></pre></td></tr></table></figure><p>下一步推送本地库内容到远程库：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push --set-upstream origin master</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>上面两条都可以</p><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>使用命令<code>git clone</code>克隆</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;你的用户名&#x2F;你的仓库名</span><br></pre></td></tr></table></figure><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建和合并分支"><a href="#创建和合并分支" class="headerlink" title="创建和合并分支"></a>创建和合并分支</h2><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch &#39;dev&#39;</span><br></pre></td></tr></table></figure><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch &#39;dev&#39;</span><br></pre></td></tr></table></figure><p>然后，用<code>git branch</code>命令查看当前分支：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p><p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p><h2 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h2><p>开发一个新feature，最好新建一个分支；</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li></ul><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><ul><li>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li><li>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</li><li>命令<code>git tag</code>可以查看所有标签。</li></ul><h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><ul><li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 的下载及安装</title>
      <link href="2021/02/03/Windows10/"/>
      <url>2021/02/03/Windows10/</url>
      
        <content type="html"><![CDATA[<p>1.首先百度搜索windows10 site: www .microsoft .com , 搜索出来点击我下图的</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200229353.png" alt="image-20210203200229353"></p><p>2.点击下方Download tool now（中文页面显示的是立即下载工具），然后点击保存</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200246929.png" alt="image-20210203200246929"></p><p>3.插上U盘，对U盘进行格式化操作</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200256992.png" alt="image-20210203200256992"></p><p>4.打开刚刚下载的软件（软件长的就是下图那样）</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200315677.png" alt="image-20210203200315677"></p><p>出现此页面后点击接受</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200329479.png" alt="image-20210203200329479"></p><p>5.点击为另一台电脑创建安装介质，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200341494.png" alt="image-20210203200341494"></p><p>6.软件会自动匹配适合你电脑的windows10版本，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200351065.png" alt="image-20210203200351065"></p><p>7.选择U盘，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200359990.png" alt="image-20210203200359990"></p><p>8.选择你的U盘，点击下一步</p><p>9.然后就进入了windows10下载页面</p><p>10.等待下载以及刻录完成，出现如下界面，点击完成，让软件自动清理</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200444993.png" alt="image-20210203200444993"></p><p>10.拔掉U盘，关闭电脑，开机时按特定的键进入开机启动项选择（惠普按F8，联想按F12，华硕按esc，选择U盘启动）</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200454223.png" alt="image-20210203200454223"></p><p>11.选择usb启动后进入windows安装页面</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200510520.png" alt="image-20210203200510520"></p><p>12.勾选我接受许可条款，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200519850.png" alt="image-20210203200519850"></p><p>13.选择我没有产品密钥</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200536055.png" alt="image-20210203200536055"></p><p>14.选择要安装的windows版本，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200553425.png" alt="image-20210203200553425"></p><p>15.点击自定义：仅安装windows</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200603592.png" alt="image-20210203200603592"></p><p>16.格式化所有磁盘，然后删除，不能格式化的，直接删除</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200613222.png" alt="image-20210203200613222"></p><p>17.点击新建，输入大小（按照MB计算的，这里新建的是C盘大小）</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200623124.png" alt="image-20210203200623124"></p><p>18.点击应用</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200633795.png" alt="image-20210203200633795"></p><p>19.然后选择那个你建的盘，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200641654.png" alt="image-20210203200641654"></p><p>20.随后便进入到了，安装页面，安装过程请耐心等待</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200650106.png" alt="image-20210203200650106"></p><p>21.等待结束后便进入了这个页面</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200659008.png" alt="image-20210203200659008"></p><p>22.根据提示进行配置，配置完成后进入windows界面</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200708290.png" alt="image-20210203200708290"></p><p>23.开机后啥都不操作，等，半小时左右吧，反正睡一觉就好了<br>然后右键个性化，主页，更新和安全，检查更新，安装过程提示重启请勿重启，等待windows全部更新完成再重启</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200717806.png" alt="image-20210203200717806"></p><p>24.然后右键点击个性化，点击主题，点击桌面图标设置</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200729340.png" alt="image-20210203200729340"></p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200818160.png" alt="image-20210203200818160"></p><p>25.设置完成后右键点击计算机，点击管理，点击磁盘管理</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200831848.png" alt="image-20210203200831848"></p><p>26.右键点击未分配，选择新建简单卷</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200844786.png" alt="image-20210203200844786"></p><p>27.选择盘符，点击下一步</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200852552.png" alt="image-20210203200852552"></p><p>28，点击下一步创建完成，然后每个盘符都这样创建</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200900794.png" alt="image-20210203200900794"></p><p>29.磁盘配置完成后，桌面右键点击显示设置</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200908610.png" alt="image-20210203200908610"></p><p>30.点击高级缩放设置</p><p><img src="https://gitee.com/chenyustudy/pic-go/raw/master/image-20210203200916561.png" alt="image-20210203200916561"></p><p>31.设置125然后点击应用，然后点击立即注销，重新登陆一下<br>至此windows安装结束</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Windows10的下载及安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语言基础</title>
      <link href="2021/01/31/Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
      <url>2021/01/31/Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章：Java语言基础"><a href="#第二章：Java语言基础" class="headerlink" title="第二章：Java语言基础"></a>第二章：Java语言基础</h1><h2 id="关于JAVA语言当中的标识符"><a href="#关于JAVA语言当中的标识符" class="headerlink" title="关于JAVA语言当中的标识符"></a>关于JAVA语言当中的标识符</h2><ul><li>什么是标识符？<ul><li>在Java源程序中凡是程序员有权利自己命令的单词都是标识符</li><li>标识符可以标识什么元素？<ul><li>类名</li><li>方法名</li><li>变量名</li><li>接口名</li><li>常量名</li></ul></li></ul></li><li>标识符的命名规则<ul><li>一个合法的标识符只能由==数字、字母、下划线、美元符号==组成，不能含有其它符号</li><li>不能以数字开头</li><li>严格区分大小写</li><li>关键字不能做标识符</li></ul></li><li>标识符的命名规范<ul><li>最好见名知意（username,password）</li><li>遵守驼峰命名规则（SystemService,UserSerivce）</li><li>类名、接口名：首字母大写，后面每个单词首字母大写</li><li>变量名、方法名：首字母小写，后面每个单词首字母大写</li><li>常量名：全部大写</li></ul></li></ul><h2 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h2><ul><li><p>关于字面值</p><ul><li>-10、100</li><li>-“abc”</li><li>-‘a’</li><li>-true、false</li><li>-3.14</li></ul></li><li><p>字面值就是数据</p></li><li><p>字面值是java源程序的组成部分之一，包括标识符和关键字它们都是Java源程序的组成部分</p></li><li><p>数据在现实世界当中是分门别类的，所以数据在计算机编程语言中也是有类型的：【数据类型】</p><ul><li>-10、100属于整数型字面值</li><li>-3.14属于浮点型字面值</li><li>-true、false属于布尔型字面值</li><li>-“abc”、”中国人”属于字符串型字面值</li><li>-‘A’、’人’属于字符型字面值</li></ul></li><li><p>注意：</p><ul><li>Java语言当中所有的字符串型字面值必须使用双引号括起来</li><li>Java语言当中所有的字符型字面值必须使用单引号括起来</li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>什么是变量？<ul><li>变量本质上来说是内存中的一块空间，这块空间==有数据类型、有名字、有字面值==</li><li>变量包含三部分：==数据类型、名称、字面值【数据】==</li><li>变量是内存中存储数据的最基本的单元</li></ul></li><li>数据类型的作用？<ul><li>不同的数据有不同的类型，不同的数据类型底层会分配不同大小的空间</li><li>数据类型是指导程序在运行阶段应该分配多大的内存空间</li></ul></li><li>变量要求：变量中存储的具体的==数据==必须和变量的==数据类型==一致，当不一致时编译报错。</li><li>声明变量的语法格式：<ul><li>数据类型 变量名;<ul><li>变量名只要是合法的标识符就行。规范：首字母小写，后面每个单词首字母大写。</li></ul></li></ul></li><li>变量声明之后怎么赋值？<ul><li>语法格式： 变量名=字面值;</li><li>要求：字面值的数据类型必须和变量的数据类型一致</li><li>等号是一个运算符，叫做赋值运算符，赋值运算符先运算等号右边的表达式，表达式执行结束之后的结果赋值给左边的变量。</li></ul></li><li>声明和赋值可以放到一起完成</li><li>变量赋值之后，可以重新赋值。变量的值可变化</li><li>有了变量的概念之后，内存空间得到了重复的使用。</li><li>通常访问一个变量包括两种访问形式<ul><li>第一种：读取变量中保存的具体数据</li><li>第二种：修改变量中保存的具体数据</li></ul></li><li>变量在一行上可以声明多个</li><li>java中的变量必须先声明，再赋值，才能访问</li><li>在方法体中的java代码，是遵守自上而下的顺序依次执行的，逐行执行。</li><li>再同一个==作用域==当中，变量名不能重名，但是变量可以重新赋值</li><li>变量的作用域<ul><li>什么是作用域？<ul><li>变量的作用域，其实描述的是变量的有效范围，在什么范围之内是可以被访问的，只要出了这个范围该变量就无法访问了。</li></ul></li></ul></li><li>关于变量的分类<ul><li>根据变量声明的位置来分类：<ul><li>局部变量<ul><li>在方法体中声明的变量叫做局部变量</li></ul></li><li>成员变量<ul><li>在方法体外【类体之内】声明的变量叫做成员变量</li></ul></li></ul></li></ul></li><li>在不同的作用域中，变量名是可以相同的</li><li>java遵循==就近原则==</li><li>类体中不能直接编写java语句【除声明变量之外】</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p>数据类型的作用是什么？</p><ul><li>程序当中有很多数据，每一个数据都是有相关类型的，不同数据类型的数据占用空间大小不同，数据类型的作用是指导JVM在运行程序的时候给该数据分配多大的内存空间</li></ul></li><li><p>数据类型的分类</p><ul><li>基本数据类型</li><li>引用数据类型（类、接口、数组······）</li></ul></li><li><p>关于基本数据类型</p><ul><li>第一类：整数型<ul><li>byte，short，int，long</li></ul></li><li>第二类：浮点型<ul><li>float，double</li></ul></li><li>第三类：布尔型<ul><li>Boolean</li></ul></li><li>第四类：字符型<ul><li>char</li></ul></li></ul></li><li><p>字符串不属于基本数据类型，属于==引用数据类型==，字符属于基本数据类型</p><ul><li>字符串使用双引号””</li><li>字符使用单引号’’</li></ul></li><li><p>八种基本数据类型各自占用空间大小是多少</p><ul><li><table><thead><tr><th>基本数据类型</th><th>占用空间大小</th></tr></thead><tbody><tr><td>byte</td><td>1</td></tr><tr><td>short</td><td>2</td></tr><tr><td>int</td><td>4</td></tr><tr><td>long</td><td>8</td></tr><tr><td>float</td><td>4</td></tr><tr><td>double</td><td>8</td></tr><tr><td>boolean</td><td>1</td></tr><tr><td>char</td><td>2</td></tr></tbody></table></li></ul></li><li><p>计算机在任何情况下都只能识别二进制。例如：只认识101010101010101010101【现代的计算机底层采用交流电的方式，接通和断开就两种状态，计算机只识别1/0，其他不认识】</p></li><li><p>什么是二进制？</p><ul><li>数据的一种表示形式。十进制表示满十进一原则。二进制表示满二进一原则</li></ul></li><li><p>字节（byte）：</p><ul><li>1byte=8bit【1个字节=8个比特位】1个比特位表示一个二进制位：1/0</li></ul></li><li><p>整数型当中的byte类型，占用</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
